
Stopwatch_With_Dual_Mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000022ba  0000234e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800068  00800068  00002356  2**0
                  ALLOC
  3 .stab         00001590  00000000  00000000  00002358  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008bc  00000000  00000000  000038e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000041a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000042e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004454  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000609d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00006f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007d38  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008125  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000088f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__vector_1>
       8:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__vector_2>
       c:	0c 94 87 0a 	jmp	0x150e	; 0x150e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ad 36       	cpi	r26, 0x6D	; 109
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea eb       	ldi	r30, 0xBA	; 186
      78:	f2 e2       	ldi	r31, 0x22	; 34
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 ae 0a 	call	0x155c	; 0x155c <main>
      8a:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Digit_And_Position>:
 *                           Functions Definitions                             *
 *******************************************************************************/

/* Function to set value one digit from 6 digits of timer */
void Digit_And_Position(unsigned char Digit, unsigned char Position)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Digit_And_Position+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	6a 83       	std	Y+2, r22	; 0x02
	/* Turn off all digit positions (PORTA controls which digit is active) */
	PORTA = (PORTA & 0xC0) | (1<< Position);
     b54:	ab e3       	ldi	r26, 0x3B	; 59
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	eb e3       	ldi	r30, 0x3B	; 59
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	48 2f       	mov	r20, r24
     b60:	40 7c       	andi	r20, 0xC0	; 192
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	02 2e       	mov	r0, r18
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <Digit_And_Position+0x2e>
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	0a 94       	dec	r0
     b76:	e2 f7       	brpl	.-8      	; 0xb70 <Digit_And_Position+0x2a>
     b78:	84 2b       	or	r24, r20
     b7a:	8c 93       	st	X, r24

	/* Set the 7-segment data (The lower 4 bits at PORTC PC0 --> PC3) */
	PORTC = (PORTC & 0xF0) | (Digit & 0x0F);
     b7c:	a5 e3       	ldi	r26, 0x35	; 53
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	e5 e3       	ldi	r30, 0x35	; 53
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	98 2f       	mov	r25, r24
     b88:	90 7f       	andi	r25, 0xF0	; 240
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	8f 70       	andi	r24, 0x0F	; 15
     b8e:	89 2b       	or	r24, r25
     b90:	8c 93       	st	X, r24
}
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	cf 91       	pop	r28
     b98:	df 91       	pop	r29
     b9a:	08 95       	ret

00000b9c <Time>:


/* Function to display all digit at same time */
void Time(void)
{
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	df 93       	push	r29
     ba2:	cf 93       	push	r28
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	c4 55       	subi	r28, 0x54	; 84
     baa:	d0 40       	sbci	r29, 0x00	; 0
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
	/* Display seconds */
	Digit_And_Position(Secs % 10, 5);  		// First digit of seconds.
     bb6:	80 91 6a 00 	lds	r24, 0x006A
     bba:	9a e0       	ldi	r25, 0x0A	; 10
     bbc:	69 2f       	mov	r22, r25
     bbe:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__udivmodqi4>
     bc2:	89 2f       	mov	r24, r25
     bc4:	65 e0       	ldi	r22, 0x05	; 5
     bc6:	0e 94 a3 05 	call	0xb46	; 0xb46 <Digit_And_Position>
     bca:	fe 01       	movw	r30, r28
     bcc:	ef 5a       	subi	r30, 0xAF	; 175
     bce:	ff 4f       	sbci	r31, 0xFF	; 255
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	a0 e8       	ldi	r26, 0x80	; 128
     bd6:	bf e3       	ldi	r27, 0x3F	; 63
     bd8:	80 83       	st	Z, r24
     bda:	91 83       	std	Z+1, r25	; 0x01
     bdc:	a2 83       	std	Z+2, r26	; 0x02
     bde:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     be0:	8e 01       	movw	r16, r28
     be2:	03 5b       	subi	r16, 0xB3	; 179
     be4:	1f 4f       	sbci	r17, 0xFF	; 255
     be6:	fe 01       	movw	r30, r28
     be8:	ef 5a       	subi	r30, 0xAF	; 175
     bea:	ff 4f       	sbci	r31, 0xFF	; 255
     bec:	60 81       	ld	r22, Z
     bee:	71 81       	ldd	r23, Z+1	; 0x01
     bf0:	82 81       	ldd	r24, Z+2	; 0x02
     bf2:	93 81       	ldd	r25, Z+3	; 0x03
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	4a e7       	ldi	r20, 0x7A	; 122
     bfa:	55 e4       	ldi	r21, 0x45	; 69
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	f8 01       	movw	r30, r16
     c06:	80 83       	st	Z, r24
     c08:	91 83       	std	Z+1, r25	; 0x01
     c0a:	a2 83       	std	Z+2, r26	; 0x02
     c0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c0e:	fe 01       	movw	r30, r28
     c10:	e3 5b       	subi	r30, 0xB3	; 179
     c12:	ff 4f       	sbci	r31, 0xFF	; 255
     c14:	60 81       	ld	r22, Z
     c16:	71 81       	ldd	r23, Z+1	; 0x01
     c18:	82 81       	ldd	r24, Z+2	; 0x02
     c1a:	93 81       	ldd	r25, Z+3	; 0x03
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	40 e8       	ldi	r20, 0x80	; 128
     c22:	5f e3       	ldi	r21, 0x3F	; 63
     c24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c28:	88 23       	and	r24, r24
     c2a:	44 f4       	brge	.+16     	; 0xc3c <Time+0xa0>
		__ticks = 1;
     c2c:	fe 01       	movw	r30, r28
     c2e:	e5 5b       	subi	r30, 0xB5	; 181
     c30:	ff 4f       	sbci	r31, 0xFF	; 255
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	91 83       	std	Z+1, r25	; 0x01
     c38:	80 83       	st	Z, r24
     c3a:	64 c0       	rjmp	.+200    	; 0xd04 <Time+0x168>
	else if (__tmp > 65535)
     c3c:	fe 01       	movw	r30, r28
     c3e:	e3 5b       	subi	r30, 0xB3	; 179
     c40:	ff 4f       	sbci	r31, 0xFF	; 255
     c42:	60 81       	ld	r22, Z
     c44:	71 81       	ldd	r23, Z+1	; 0x01
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	3f ef       	ldi	r19, 0xFF	; 255
     c4e:	4f e7       	ldi	r20, 0x7F	; 127
     c50:	57 e4       	ldi	r21, 0x47	; 71
     c52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c56:	18 16       	cp	r1, r24
     c58:	0c f0       	brlt	.+2      	; 0xc5c <Time+0xc0>
     c5a:	43 c0       	rjmp	.+134    	; 0xce2 <Time+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c5c:	fe 01       	movw	r30, r28
     c5e:	ef 5a       	subi	r30, 0xAF	; 175
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	60 81       	ld	r22, Z
     c64:	71 81       	ldd	r23, Z+1	; 0x01
     c66:	82 81       	ldd	r24, Z+2	; 0x02
     c68:	93 81       	ldd	r25, Z+3	; 0x03
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e2       	ldi	r20, 0x20	; 32
     c70:	51 e4       	ldi	r21, 0x41	; 65
     c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c76:	dc 01       	movw	r26, r24
     c78:	cb 01       	movw	r24, r22
     c7a:	8e 01       	movw	r16, r28
     c7c:	05 5b       	subi	r16, 0xB5	; 181
     c7e:	1f 4f       	sbci	r17, 0xFF	; 255
     c80:	bc 01       	movw	r22, r24
     c82:	cd 01       	movw	r24, r26
     c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c88:	dc 01       	movw	r26, r24
     c8a:	cb 01       	movw	r24, r22
     c8c:	f8 01       	movw	r30, r16
     c8e:	91 83       	std	Z+1, r25	; 0x01
     c90:	80 83       	st	Z, r24
     c92:	1f c0       	rjmp	.+62     	; 0xcd2 <Time+0x136>
     c94:	fe 01       	movw	r30, r28
     c96:	e7 5b       	subi	r30, 0xB7	; 183
     c98:	ff 4f       	sbci	r31, 0xFF	; 255
     c9a:	80 e9       	ldi	r24, 0x90	; 144
     c9c:	91 e0       	ldi	r25, 0x01	; 1
     c9e:	91 83       	std	Z+1, r25	; 0x01
     ca0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ca2:	fe 01       	movw	r30, r28
     ca4:	e7 5b       	subi	r30, 0xB7	; 183
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	80 81       	ld	r24, Z
     caa:	91 81       	ldd	r25, Z+1	; 0x01
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	f1 f7       	brne	.-4      	; 0xcac <Time+0x110>
     cb0:	fe 01       	movw	r30, r28
     cb2:	e7 5b       	subi	r30, 0xB7	; 183
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	91 83       	std	Z+1, r25	; 0x01
     cb8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cba:	de 01       	movw	r26, r28
     cbc:	a5 5b       	subi	r26, 0xB5	; 181
     cbe:	bf 4f       	sbci	r27, 0xFF	; 255
     cc0:	fe 01       	movw	r30, r28
     cc2:	e5 5b       	subi	r30, 0xB5	; 181
     cc4:	ff 4f       	sbci	r31, 0xFF	; 255
     cc6:	80 81       	ld	r24, Z
     cc8:	91 81       	ldd	r25, Z+1	; 0x01
     cca:	01 97       	sbiw	r24, 0x01	; 1
     ccc:	11 96       	adiw	r26, 0x01	; 1
     cce:	9c 93       	st	X, r25
     cd0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cd2:	fe 01       	movw	r30, r28
     cd4:	e5 5b       	subi	r30, 0xB5	; 181
     cd6:	ff 4f       	sbci	r31, 0xFF	; 255
     cd8:	80 81       	ld	r24, Z
     cda:	91 81       	ldd	r25, Z+1	; 0x01
     cdc:	00 97       	sbiw	r24, 0x00	; 0
     cde:	d1 f6       	brne	.-76     	; 0xc94 <Time+0xf8>
     ce0:	27 c0       	rjmp	.+78     	; 0xd30 <Time+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ce2:	8e 01       	movw	r16, r28
     ce4:	05 5b       	subi	r16, 0xB5	; 181
     ce6:	1f 4f       	sbci	r17, 0xFF	; 255
     ce8:	fe 01       	movw	r30, r28
     cea:	e3 5b       	subi	r30, 0xB3	; 179
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	60 81       	ld	r22, Z
     cf0:	71 81       	ldd	r23, Z+1	; 0x01
     cf2:	82 81       	ldd	r24, Z+2	; 0x02
     cf4:	93 81       	ldd	r25, Z+3	; 0x03
     cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cfa:	dc 01       	movw	r26, r24
     cfc:	cb 01       	movw	r24, r22
     cfe:	f8 01       	movw	r30, r16
     d00:	91 83       	std	Z+1, r25	; 0x01
     d02:	80 83       	st	Z, r24
     d04:	de 01       	movw	r26, r28
     d06:	a9 5b       	subi	r26, 0xB9	; 185
     d08:	bf 4f       	sbci	r27, 0xFF	; 255
     d0a:	fe 01       	movw	r30, r28
     d0c:	e5 5b       	subi	r30, 0xB5	; 181
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	80 81       	ld	r24, Z
     d12:	91 81       	ldd	r25, Z+1	; 0x01
     d14:	8d 93       	st	X+, r24
     d16:	9c 93       	st	X, r25
     d18:	fe 01       	movw	r30, r28
     d1a:	e9 5b       	subi	r30, 0xB9	; 185
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	80 81       	ld	r24, Z
     d20:	91 81       	ldd	r25, Z+1	; 0x01
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	f1 f7       	brne	.-4      	; 0xd22 <Time+0x186>
     d26:	fe 01       	movw	r30, r28
     d28:	e9 5b       	subi	r30, 0xB9	; 185
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	91 83       	std	Z+1, r25	; 0x01
     d2e:	80 83       	st	Z, r24
	_delay_ms(1);
	Digit_And_Position(Secs / 10, 4);  		// Second digit of seconds.
     d30:	80 91 6a 00 	lds	r24, 0x006A
     d34:	9a e0       	ldi	r25, 0x0A	; 10
     d36:	69 2f       	mov	r22, r25
     d38:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__udivmodqi4>
     d3c:	64 e0       	ldi	r22, 0x04	; 4
     d3e:	0e 94 a3 05 	call	0xb46	; 0xb46 <Digit_And_Position>
     d42:	fe 01       	movw	r30, r28
     d44:	ed 5b       	subi	r30, 0xBD	; 189
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	a0 e8       	ldi	r26, 0x80	; 128
     d4e:	bf e3       	ldi	r27, 0x3F	; 63
     d50:	80 83       	st	Z, r24
     d52:	91 83       	std	Z+1, r25	; 0x01
     d54:	a2 83       	std	Z+2, r26	; 0x02
     d56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d58:	8e 01       	movw	r16, r28
     d5a:	01 5c       	subi	r16, 0xC1	; 193
     d5c:	1f 4f       	sbci	r17, 0xFF	; 255
     d5e:	fe 01       	movw	r30, r28
     d60:	ed 5b       	subi	r30, 0xBD	; 189
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	60 81       	ld	r22, Z
     d66:	71 81       	ldd	r23, Z+1	; 0x01
     d68:	82 81       	ldd	r24, Z+2	; 0x02
     d6a:	93 81       	ldd	r25, Z+3	; 0x03
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	4a e7       	ldi	r20, 0x7A	; 122
     d72:	55 e4       	ldi	r21, 0x45	; 69
     d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d78:	dc 01       	movw	r26, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	f8 01       	movw	r30, r16
     d7e:	80 83       	st	Z, r24
     d80:	91 83       	std	Z+1, r25	; 0x01
     d82:	a2 83       	std	Z+2, r26	; 0x02
     d84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d86:	fe 01       	movw	r30, r28
     d88:	ff 96       	adiw	r30, 0x3f	; 63
     d8a:	60 81       	ld	r22, Z
     d8c:	71 81       	ldd	r23, Z+1	; 0x01
     d8e:	82 81       	ldd	r24, Z+2	; 0x02
     d90:	93 81       	ldd	r25, Z+3	; 0x03
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	40 e8       	ldi	r20, 0x80	; 128
     d98:	5f e3       	ldi	r21, 0x3F	; 63
     d9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d9e:	88 23       	and	r24, r24
     da0:	2c f4       	brge	.+10     	; 0xdac <Time+0x210>
		__ticks = 1;
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	9e af       	std	Y+62, r25	; 0x3e
     da8:	8d af       	std	Y+61, r24	; 0x3d
     daa:	46 c0       	rjmp	.+140    	; 0xe38 <Time+0x29c>
	else if (__tmp > 65535)
     dac:	fe 01       	movw	r30, r28
     dae:	ff 96       	adiw	r30, 0x3f	; 63
     db0:	60 81       	ld	r22, Z
     db2:	71 81       	ldd	r23, Z+1	; 0x01
     db4:	82 81       	ldd	r24, Z+2	; 0x02
     db6:	93 81       	ldd	r25, Z+3	; 0x03
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	3f ef       	ldi	r19, 0xFF	; 255
     dbc:	4f e7       	ldi	r20, 0x7F	; 127
     dbe:	57 e4       	ldi	r21, 0x47	; 71
     dc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dc4:	18 16       	cp	r1, r24
     dc6:	64 f5       	brge	.+88     	; 0xe20 <Time+0x284>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc8:	fe 01       	movw	r30, r28
     dca:	ed 5b       	subi	r30, 0xBD	; 189
     dcc:	ff 4f       	sbci	r31, 0xFF	; 255
     dce:	60 81       	ld	r22, Z
     dd0:	71 81       	ldd	r23, Z+1	; 0x01
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	93 81       	ldd	r25, Z+3	; 0x03
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	40 e2       	ldi	r20, 0x20	; 32
     ddc:	51 e4       	ldi	r21, 0x41	; 65
     dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	bc 01       	movw	r22, r24
     de8:	cd 01       	movw	r24, r26
     dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dee:	dc 01       	movw	r26, r24
     df0:	cb 01       	movw	r24, r22
     df2:	9e af       	std	Y+62, r25	; 0x3e
     df4:	8d af       	std	Y+61, r24	; 0x3d
     df6:	0f c0       	rjmp	.+30     	; 0xe16 <Time+0x27a>
     df8:	80 e9       	ldi	r24, 0x90	; 144
     dfa:	91 e0       	ldi	r25, 0x01	; 1
     dfc:	9c af       	std	Y+60, r25	; 0x3c
     dfe:	8b af       	std	Y+59, r24	; 0x3b
     e00:	8b ad       	ldd	r24, Y+59	; 0x3b
     e02:	9c ad       	ldd	r25, Y+60	; 0x3c
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	f1 f7       	brne	.-4      	; 0xe04 <Time+0x268>
     e08:	9c af       	std	Y+60, r25	; 0x3c
     e0a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e0c:	8d ad       	ldd	r24, Y+61	; 0x3d
     e0e:	9e ad       	ldd	r25, Y+62	; 0x3e
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	9e af       	std	Y+62, r25	; 0x3e
     e14:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e16:	8d ad       	ldd	r24, Y+61	; 0x3d
     e18:	9e ad       	ldd	r25, Y+62	; 0x3e
     e1a:	00 97       	sbiw	r24, 0x00	; 0
     e1c:	69 f7       	brne	.-38     	; 0xdf8 <Time+0x25c>
     e1e:	16 c0       	rjmp	.+44     	; 0xe4c <Time+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e20:	fe 01       	movw	r30, r28
     e22:	ff 96       	adiw	r30, 0x3f	; 63
     e24:	60 81       	ld	r22, Z
     e26:	71 81       	ldd	r23, Z+1	; 0x01
     e28:	82 81       	ldd	r24, Z+2	; 0x02
     e2a:	93 81       	ldd	r25, Z+3	; 0x03
     e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	9e af       	std	Y+62, r25	; 0x3e
     e36:	8d af       	std	Y+61, r24	; 0x3d
     e38:	8d ad       	ldd	r24, Y+61	; 0x3d
     e3a:	9e ad       	ldd	r25, Y+62	; 0x3e
     e3c:	9a af       	std	Y+58, r25	; 0x3a
     e3e:	89 af       	std	Y+57, r24	; 0x39
     e40:	89 ad       	ldd	r24, Y+57	; 0x39
     e42:	9a ad       	ldd	r25, Y+58	; 0x3a
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	f1 f7       	brne	.-4      	; 0xe44 <Time+0x2a8>
     e48:	9a af       	std	Y+58, r25	; 0x3a
     e4a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	/* Display minutes */
	Digit_And_Position(Mins % 10, 3);  		// First digit of minutes.
     e4c:	80 91 69 00 	lds	r24, 0x0069
     e50:	9a e0       	ldi	r25, 0x0A	; 10
     e52:	69 2f       	mov	r22, r25
     e54:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__udivmodqi4>
     e58:	89 2f       	mov	r24, r25
     e5a:	63 e0       	ldi	r22, 0x03	; 3
     e5c:	0e 94 a3 05 	call	0xb46	; 0xb46 <Digit_And_Position>
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	a0 e8       	ldi	r26, 0x80	; 128
     e66:	bf e3       	ldi	r27, 0x3F	; 63
     e68:	8d ab       	std	Y+53, r24	; 0x35
     e6a:	9e ab       	std	Y+54, r25	; 0x36
     e6c:	af ab       	std	Y+55, r26	; 0x37
     e6e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e70:	6d a9       	ldd	r22, Y+53	; 0x35
     e72:	7e a9       	ldd	r23, Y+54	; 0x36
     e74:	8f a9       	ldd	r24, Y+55	; 0x37
     e76:	98 ad       	ldd	r25, Y+56	; 0x38
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	4a e7       	ldi	r20, 0x7A	; 122
     e7e:	55 e4       	ldi	r21, 0x45	; 69
     e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	89 ab       	std	Y+49, r24	; 0x31
     e8a:	9a ab       	std	Y+50, r25	; 0x32
     e8c:	ab ab       	std	Y+51, r26	; 0x33
     e8e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e90:	69 a9       	ldd	r22, Y+49	; 0x31
     e92:	7a a9       	ldd	r23, Y+50	; 0x32
     e94:	8b a9       	ldd	r24, Y+51	; 0x33
     e96:	9c a9       	ldd	r25, Y+52	; 0x34
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e8       	ldi	r20, 0x80	; 128
     e9e:	5f e3       	ldi	r21, 0x3F	; 63
     ea0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ea4:	88 23       	and	r24, r24
     ea6:	2c f4       	brge	.+10     	; 0xeb2 <Time+0x316>
		__ticks = 1;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	98 ab       	std	Y+48, r25	; 0x30
     eae:	8f a7       	std	Y+47, r24	; 0x2f
     eb0:	3f c0       	rjmp	.+126    	; 0xf30 <Time+0x394>
	else if (__tmp > 65535)
     eb2:	69 a9       	ldd	r22, Y+49	; 0x31
     eb4:	7a a9       	ldd	r23, Y+50	; 0x32
     eb6:	8b a9       	ldd	r24, Y+51	; 0x33
     eb8:	9c a9       	ldd	r25, Y+52	; 0x34
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	3f ef       	ldi	r19, 0xFF	; 255
     ebe:	4f e7       	ldi	r20, 0x7F	; 127
     ec0:	57 e4       	ldi	r21, 0x47	; 71
     ec2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ec6:	18 16       	cp	r1, r24
     ec8:	4c f5       	brge	.+82     	; 0xf1c <Time+0x380>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eca:	6d a9       	ldd	r22, Y+53	; 0x35
     ecc:	7e a9       	ldd	r23, Y+54	; 0x36
     ece:	8f a9       	ldd	r24, Y+55	; 0x37
     ed0:	98 ad       	ldd	r25, Y+56	; 0x38
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e2       	ldi	r20, 0x20	; 32
     ed8:	51 e4       	ldi	r21, 0x41	; 65
     eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	bc 01       	movw	r22, r24
     ee4:	cd 01       	movw	r24, r26
     ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	98 ab       	std	Y+48, r25	; 0x30
     ef0:	8f a7       	std	Y+47, r24	; 0x2f
     ef2:	0f c0       	rjmp	.+30     	; 0xf12 <Time+0x376>
     ef4:	80 e9       	ldi	r24, 0x90	; 144
     ef6:	91 e0       	ldi	r25, 0x01	; 1
     ef8:	9e a7       	std	Y+46, r25	; 0x2e
     efa:	8d a7       	std	Y+45, r24	; 0x2d
     efc:	8d a5       	ldd	r24, Y+45	; 0x2d
     efe:	9e a5       	ldd	r25, Y+46	; 0x2e
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <Time+0x364>
     f04:	9e a7       	std	Y+46, r25	; 0x2e
     f06:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f08:	8f a5       	ldd	r24, Y+47	; 0x2f
     f0a:	98 a9       	ldd	r25, Y+48	; 0x30
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	98 ab       	std	Y+48, r25	; 0x30
     f10:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f12:	8f a5       	ldd	r24, Y+47	; 0x2f
     f14:	98 a9       	ldd	r25, Y+48	; 0x30
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	69 f7       	brne	.-38     	; 0xef4 <Time+0x358>
     f1a:	14 c0       	rjmp	.+40     	; 0xf44 <Time+0x3a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f1c:	69 a9       	ldd	r22, Y+49	; 0x31
     f1e:	7a a9       	ldd	r23, Y+50	; 0x32
     f20:	8b a9       	ldd	r24, Y+51	; 0x33
     f22:	9c a9       	ldd	r25, Y+52	; 0x34
     f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	98 ab       	std	Y+48, r25	; 0x30
     f2e:	8f a7       	std	Y+47, r24	; 0x2f
     f30:	8f a5       	ldd	r24, Y+47	; 0x2f
     f32:	98 a9       	ldd	r25, Y+48	; 0x30
     f34:	9c a7       	std	Y+44, r25	; 0x2c
     f36:	8b a7       	std	Y+43, r24	; 0x2b
     f38:	8b a5       	ldd	r24, Y+43	; 0x2b
     f3a:	9c a5       	ldd	r25, Y+44	; 0x2c
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <Time+0x3a0>
     f40:	9c a7       	std	Y+44, r25	; 0x2c
     f42:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Digit_And_Position(Mins / 10, 2);  		// Second digit of minutes.
     f44:	80 91 69 00 	lds	r24, 0x0069
     f48:	9a e0       	ldi	r25, 0x0A	; 10
     f4a:	69 2f       	mov	r22, r25
     f4c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__udivmodqi4>
     f50:	62 e0       	ldi	r22, 0x02	; 2
     f52:	0e 94 a3 05 	call	0xb46	; 0xb46 <Digit_And_Position>
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	a0 e8       	ldi	r26, 0x80	; 128
     f5c:	bf e3       	ldi	r27, 0x3F	; 63
     f5e:	8f a3       	std	Y+39, r24	; 0x27
     f60:	98 a7       	std	Y+40, r25	; 0x28
     f62:	a9 a7       	std	Y+41, r26	; 0x29
     f64:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f66:	6f a1       	ldd	r22, Y+39	; 0x27
     f68:	78 a5       	ldd	r23, Y+40	; 0x28
     f6a:	89 a5       	ldd	r24, Y+41	; 0x29
     f6c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	4a e7       	ldi	r20, 0x7A	; 122
     f74:	55 e4       	ldi	r21, 0x45	; 69
     f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	8b a3       	std	Y+35, r24	; 0x23
     f80:	9c a3       	std	Y+36, r25	; 0x24
     f82:	ad a3       	std	Y+37, r26	; 0x25
     f84:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f86:	6b a1       	ldd	r22, Y+35	; 0x23
     f88:	7c a1       	ldd	r23, Y+36	; 0x24
     f8a:	8d a1       	ldd	r24, Y+37	; 0x25
     f8c:	9e a1       	ldd	r25, Y+38	; 0x26
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 e8       	ldi	r20, 0x80	; 128
     f94:	5f e3       	ldi	r21, 0x3F	; 63
     f96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f9a:	88 23       	and	r24, r24
     f9c:	2c f4       	brge	.+10     	; 0xfa8 <Time+0x40c>
		__ticks = 1;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	9a a3       	std	Y+34, r25	; 0x22
     fa4:	89 a3       	std	Y+33, r24	; 0x21
     fa6:	3f c0       	rjmp	.+126    	; 0x1026 <Time+0x48a>
	else if (__tmp > 65535)
     fa8:	6b a1       	ldd	r22, Y+35	; 0x23
     faa:	7c a1       	ldd	r23, Y+36	; 0x24
     fac:	8d a1       	ldd	r24, Y+37	; 0x25
     fae:	9e a1       	ldd	r25, Y+38	; 0x26
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	3f ef       	ldi	r19, 0xFF	; 255
     fb4:	4f e7       	ldi	r20, 0x7F	; 127
     fb6:	57 e4       	ldi	r21, 0x47	; 71
     fb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fbc:	18 16       	cp	r1, r24
     fbe:	4c f5       	brge	.+82     	; 0x1012 <Time+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fc0:	6f a1       	ldd	r22, Y+39	; 0x27
     fc2:	78 a5       	ldd	r23, Y+40	; 0x28
     fc4:	89 a5       	ldd	r24, Y+41	; 0x29
     fc6:	9a a5       	ldd	r25, Y+42	; 0x2a
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	40 e2       	ldi	r20, 0x20	; 32
     fce:	51 e4       	ldi	r21, 0x41	; 65
     fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	bc 01       	movw	r22, r24
     fda:	cd 01       	movw	r24, r26
     fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	9a a3       	std	Y+34, r25	; 0x22
     fe6:	89 a3       	std	Y+33, r24	; 0x21
     fe8:	0f c0       	rjmp	.+30     	; 0x1008 <Time+0x46c>
     fea:	80 e9       	ldi	r24, 0x90	; 144
     fec:	91 e0       	ldi	r25, 0x01	; 1
     fee:	98 a3       	std	Y+32, r25	; 0x20
     ff0:	8f 8f       	std	Y+31, r24	; 0x1f
     ff2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ff4:	98 a1       	ldd	r25, Y+32	; 0x20
     ff6:	01 97       	sbiw	r24, 0x01	; 1
     ff8:	f1 f7       	brne	.-4      	; 0xff6 <Time+0x45a>
     ffa:	98 a3       	std	Y+32, r25	; 0x20
     ffc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ffe:	89 a1       	ldd	r24, Y+33	; 0x21
    1000:	9a a1       	ldd	r25, Y+34	; 0x22
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	9a a3       	std	Y+34, r25	; 0x22
    1006:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1008:	89 a1       	ldd	r24, Y+33	; 0x21
    100a:	9a a1       	ldd	r25, Y+34	; 0x22
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	69 f7       	brne	.-38     	; 0xfea <Time+0x44e>
    1010:	14 c0       	rjmp	.+40     	; 0x103a <Time+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1012:	6b a1       	ldd	r22, Y+35	; 0x23
    1014:	7c a1       	ldd	r23, Y+36	; 0x24
    1016:	8d a1       	ldd	r24, Y+37	; 0x25
    1018:	9e a1       	ldd	r25, Y+38	; 0x26
    101a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	9a a3       	std	Y+34, r25	; 0x22
    1024:	89 a3       	std	Y+33, r24	; 0x21
    1026:	89 a1       	ldd	r24, Y+33	; 0x21
    1028:	9a a1       	ldd	r25, Y+34	; 0x22
    102a:	9e 8f       	std	Y+30, r25	; 0x1e
    102c:	8d 8f       	std	Y+29, r24	; 0x1d
    102e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1030:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1032:	01 97       	sbiw	r24, 0x01	; 1
    1034:	f1 f7       	brne	.-4      	; 0x1032 <Time+0x496>
    1036:	9e 8f       	std	Y+30, r25	; 0x1e
    1038:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* Display hours */
	Digit_And_Position(Hrs % 10, 1);  		// First digit of hours.
    103a:	80 91 68 00 	lds	r24, 0x0068
    103e:	9a e0       	ldi	r25, 0x0A	; 10
    1040:	69 2f       	mov	r22, r25
    1042:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__udivmodqi4>
    1046:	89 2f       	mov	r24, r25
    1048:	61 e0       	ldi	r22, 0x01	; 1
    104a:	0e 94 a3 05 	call	0xb46	; 0xb46 <Digit_And_Position>
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	a0 e8       	ldi	r26, 0x80	; 128
    1054:	bf e3       	ldi	r27, 0x3F	; 63
    1056:	89 8f       	std	Y+25, r24	; 0x19
    1058:	9a 8f       	std	Y+26, r25	; 0x1a
    105a:	ab 8f       	std	Y+27, r26	; 0x1b
    105c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    105e:	69 8d       	ldd	r22, Y+25	; 0x19
    1060:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1062:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1064:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	4a e7       	ldi	r20, 0x7A	; 122
    106c:	55 e4       	ldi	r21, 0x45	; 69
    106e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	8d 8b       	std	Y+21, r24	; 0x15
    1078:	9e 8b       	std	Y+22, r25	; 0x16
    107a:	af 8b       	std	Y+23, r26	; 0x17
    107c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    107e:	6d 89       	ldd	r22, Y+21	; 0x15
    1080:	7e 89       	ldd	r23, Y+22	; 0x16
    1082:	8f 89       	ldd	r24, Y+23	; 0x17
    1084:	98 8d       	ldd	r25, Y+24	; 0x18
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e8       	ldi	r20, 0x80	; 128
    108c:	5f e3       	ldi	r21, 0x3F	; 63
    108e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1092:	88 23       	and	r24, r24
    1094:	2c f4       	brge	.+10     	; 0x10a0 <Time+0x504>
		__ticks = 1;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	9c 8b       	std	Y+20, r25	; 0x14
    109c:	8b 8b       	std	Y+19, r24	; 0x13
    109e:	3f c0       	rjmp	.+126    	; 0x111e <Time+0x582>
	else if (__tmp > 65535)
    10a0:	6d 89       	ldd	r22, Y+21	; 0x15
    10a2:	7e 89       	ldd	r23, Y+22	; 0x16
    10a4:	8f 89       	ldd	r24, Y+23	; 0x17
    10a6:	98 8d       	ldd	r25, Y+24	; 0x18
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	3f ef       	ldi	r19, 0xFF	; 255
    10ac:	4f e7       	ldi	r20, 0x7F	; 127
    10ae:	57 e4       	ldi	r21, 0x47	; 71
    10b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10b4:	18 16       	cp	r1, r24
    10b6:	4c f5       	brge	.+82     	; 0x110a <Time+0x56e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b8:	69 8d       	ldd	r22, Y+25	; 0x19
    10ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e2       	ldi	r20, 0x20	; 32
    10c6:	51 e4       	ldi	r21, 0x41	; 65
    10c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	bc 01       	movw	r22, r24
    10d2:	cd 01       	movw	r24, r26
    10d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	9c 8b       	std	Y+20, r25	; 0x14
    10de:	8b 8b       	std	Y+19, r24	; 0x13
    10e0:	0f c0       	rjmp	.+30     	; 0x1100 <Time+0x564>
    10e2:	80 e9       	ldi	r24, 0x90	; 144
    10e4:	91 e0       	ldi	r25, 0x01	; 1
    10e6:	9a 8b       	std	Y+18, r25	; 0x12
    10e8:	89 8b       	std	Y+17, r24	; 0x11
    10ea:	89 89       	ldd	r24, Y+17	; 0x11
    10ec:	9a 89       	ldd	r25, Y+18	; 0x12
    10ee:	01 97       	sbiw	r24, 0x01	; 1
    10f0:	f1 f7       	brne	.-4      	; 0x10ee <Time+0x552>
    10f2:	9a 8b       	std	Y+18, r25	; 0x12
    10f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f6:	8b 89       	ldd	r24, Y+19	; 0x13
    10f8:	9c 89       	ldd	r25, Y+20	; 0x14
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	9c 8b       	std	Y+20, r25	; 0x14
    10fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1100:	8b 89       	ldd	r24, Y+19	; 0x13
    1102:	9c 89       	ldd	r25, Y+20	; 0x14
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	69 f7       	brne	.-38     	; 0x10e2 <Time+0x546>
    1108:	14 c0       	rjmp	.+40     	; 0x1132 <Time+0x596>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    110a:	6d 89       	ldd	r22, Y+21	; 0x15
    110c:	7e 89       	ldd	r23, Y+22	; 0x16
    110e:	8f 89       	ldd	r24, Y+23	; 0x17
    1110:	98 8d       	ldd	r25, Y+24	; 0x18
    1112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	9c 8b       	std	Y+20, r25	; 0x14
    111c:	8b 8b       	std	Y+19, r24	; 0x13
    111e:	8b 89       	ldd	r24, Y+19	; 0x13
    1120:	9c 89       	ldd	r25, Y+20	; 0x14
    1122:	98 8b       	std	Y+16, r25	; 0x10
    1124:	8f 87       	std	Y+15, r24	; 0x0f
    1126:	8f 85       	ldd	r24, Y+15	; 0x0f
    1128:	98 89       	ldd	r25, Y+16	; 0x10
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	f1 f7       	brne	.-4      	; 0x112a <Time+0x58e>
    112e:	98 8b       	std	Y+16, r25	; 0x10
    1130:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Digit_And_Position(Hrs / 10, 0);  		// Second digit of hours.
    1132:	80 91 68 00 	lds	r24, 0x0068
    1136:	9a e0       	ldi	r25, 0x0A	; 10
    1138:	69 2f       	mov	r22, r25
    113a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__udivmodqi4>
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	0e 94 a3 05 	call	0xb46	; 0xb46 <Digit_And_Position>
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	a0 e8       	ldi	r26, 0x80	; 128
    114a:	bf e3       	ldi	r27, 0x3F	; 63
    114c:	8b 87       	std	Y+11, r24	; 0x0b
    114e:	9c 87       	std	Y+12, r25	; 0x0c
    1150:	ad 87       	std	Y+13, r26	; 0x0d
    1152:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1154:	6b 85       	ldd	r22, Y+11	; 0x0b
    1156:	7c 85       	ldd	r23, Y+12	; 0x0c
    1158:	8d 85       	ldd	r24, Y+13	; 0x0d
    115a:	9e 85       	ldd	r25, Y+14	; 0x0e
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	4a e7       	ldi	r20, 0x7A	; 122
    1162:	55 e4       	ldi	r21, 0x45	; 69
    1164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	8f 83       	std	Y+7, r24	; 0x07
    116e:	98 87       	std	Y+8, r25	; 0x08
    1170:	a9 87       	std	Y+9, r26	; 0x09
    1172:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1174:	6f 81       	ldd	r22, Y+7	; 0x07
    1176:	78 85       	ldd	r23, Y+8	; 0x08
    1178:	89 85       	ldd	r24, Y+9	; 0x09
    117a:	9a 85       	ldd	r25, Y+10	; 0x0a
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	40 e8       	ldi	r20, 0x80	; 128
    1182:	5f e3       	ldi	r21, 0x3F	; 63
    1184:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1188:	88 23       	and	r24, r24
    118a:	2c f4       	brge	.+10     	; 0x1196 <Time+0x5fa>
		__ticks = 1;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	9e 83       	std	Y+6, r25	; 0x06
    1192:	8d 83       	std	Y+5, r24	; 0x05
    1194:	3f c0       	rjmp	.+126    	; 0x1214 <Time+0x678>
	else if (__tmp > 65535)
    1196:	6f 81       	ldd	r22, Y+7	; 0x07
    1198:	78 85       	ldd	r23, Y+8	; 0x08
    119a:	89 85       	ldd	r24, Y+9	; 0x09
    119c:	9a 85       	ldd	r25, Y+10	; 0x0a
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	3f ef       	ldi	r19, 0xFF	; 255
    11a2:	4f e7       	ldi	r20, 0x7F	; 127
    11a4:	57 e4       	ldi	r21, 0x47	; 71
    11a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11aa:	18 16       	cp	r1, r24
    11ac:	4c f5       	brge	.+82     	; 0x1200 <Time+0x664>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    11b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	40 e2       	ldi	r20, 0x20	; 32
    11bc:	51 e4       	ldi	r21, 0x41	; 65
    11be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	bc 01       	movw	r22, r24
    11c8:	cd 01       	movw	r24, r26
    11ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	9e 83       	std	Y+6, r25	; 0x06
    11d4:	8d 83       	std	Y+5, r24	; 0x05
    11d6:	0f c0       	rjmp	.+30     	; 0x11f6 <Time+0x65a>
    11d8:	80 e9       	ldi	r24, 0x90	; 144
    11da:	91 e0       	ldi	r25, 0x01	; 1
    11dc:	9c 83       	std	Y+4, r25	; 0x04
    11de:	8b 83       	std	Y+3, r24	; 0x03
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	9c 81       	ldd	r25, Y+4	; 0x04
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <Time+0x648>
    11e8:	9c 83       	std	Y+4, r25	; 0x04
    11ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ec:	8d 81       	ldd	r24, Y+5	; 0x05
    11ee:	9e 81       	ldd	r25, Y+6	; 0x06
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	9e 83       	std	Y+6, r25	; 0x06
    11f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f6:	8d 81       	ldd	r24, Y+5	; 0x05
    11f8:	9e 81       	ldd	r25, Y+6	; 0x06
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	69 f7       	brne	.-38     	; 0x11d8 <Time+0x63c>
    11fe:	14 c0       	rjmp	.+40     	; 0x1228 <Time+0x68c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1200:	6f 81       	ldd	r22, Y+7	; 0x07
    1202:	78 85       	ldd	r23, Y+8	; 0x08
    1204:	89 85       	ldd	r24, Y+9	; 0x09
    1206:	9a 85       	ldd	r25, Y+10	; 0x0a
    1208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	9e 83       	std	Y+6, r25	; 0x06
    1212:	8d 83       	std	Y+5, r24	; 0x05
    1214:	8d 81       	ldd	r24, Y+5	; 0x05
    1216:	9e 81       	ldd	r25, Y+6	; 0x06
    1218:	9a 83       	std	Y+2, r25	; 0x02
    121a:	89 83       	std	Y+1, r24	; 0x01
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	9a 81       	ldd	r25, Y+2	; 0x02
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	f1 f7       	brne	.-4      	; 0x1220 <Time+0x684>
    1224:	9a 83       	std	Y+2, r25	; 0x02
    1226:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1228:	cc 5a       	subi	r28, 0xAC	; 172
    122a:	df 4f       	sbci	r29, 0xFF	; 255
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	f8 94       	cli
    1230:	de bf       	out	0x3e, r29	; 62
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	cd bf       	out	0x3d, r28	; 61
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	1f 91       	pop	r17
    123c:	0f 91       	pop	r16
    123e:	08 95       	ret

00001240 <Timer1_CTC_Init>:


/* Function Enable Timer1 (Compare mode is used) to calculate 1 Second */
void Timer1_CTC_Init(void)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
	/* Set FOC1A & FOC1B for non PWM.
	 * Set WGM12 to select mode number 4 CTC.
	 * Set CS10 & CS12 to select Prescaler 1024 (Fcpu/1024). */
	TCCR1A = (1<< FOC1A) | (1<< FOC1B);
    1248:	ef e4       	ldi	r30, 0x4F	; 79
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	8c e0       	ldi	r24, 0x0C	; 12
    124e:	80 83       	st	Z, r24
	TCCR1B = (1<< WGM12) | (1<< CS10) | (1<< CS12);
    1250:	ee e4       	ldi	r30, 0x4E	; 78
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	8d e0       	ldi	r24, 0x0D	; 13
    1256:	80 83       	st	Z, r24
	 * So the Ttime = 63.81 us
	 * Tcompare= Ttime X compare value
	 * Tcompare= (63.81 us) X (15672) = 1.00003032 sec*/

	/* Set initial value for Timer1 and set compare value. */
	TCNT1 = 0;										// Initial value.
    1258:	ec e4       	ldi	r30, 0x4C	; 76
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	11 82       	std	Z+1, r1	; 0x01
    125e:	10 82       	st	Z, r1
	OCR1A = 15672;									// Compare value.
    1260:	ea e4       	ldi	r30, 0x4A	; 74
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	88 e3       	ldi	r24, 0x38	; 56
    1266:	9d e3       	ldi	r25, 0x3D	; 61
    1268:	91 83       	std	Z+1, r25	; 0x01
    126a:	80 83       	st	Z, r24

	/* Enable Timer1 interrupt */
	TIMSK |= (1<< OCIE1A);
    126c:	a9 e5       	ldi	r26, 0x59	; 89
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e9 e5       	ldi	r30, 0x59	; 89
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	80 61       	ori	r24, 0x10	; 16
    1278:	8c 93       	st	X, r24

}
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <__vector_7>:


/* Interrupt Service Routine for Timer1 */
ISR(TIMER1_COMPA_vect)
{
    1280:	1f 92       	push	r1
    1282:	0f 92       	push	r0
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	0f 92       	push	r0
    1288:	11 24       	eor	r1, r1
    128a:	8f 93       	push	r24
    128c:	af 93       	push	r26
    128e:	bf 93       	push	r27
    1290:	ef 93       	push	r30
    1292:	ff 93       	push	r31
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
	/* This ISR handles the counting of timer and if timer will count up or down */

	/* Count Down mode */
	if (Flag_Countdown_Mode)
    129c:	80 91 6b 00 	lds	r24, 0x006B
    12a0:	88 23       	and	r24, r24
    12a2:	79 f1       	breq	.+94     	; 0x1302 <__vector_7+0x82>
	{
		if(Secs == 0)
    12a4:	80 91 6a 00 	lds	r24, 0x006A
    12a8:	88 23       	and	r24, r24
    12aa:	29 f5       	brne	.+74     	; 0x12f6 <__vector_7+0x76>
		{
			if (Mins == 0)
    12ac:	80 91 69 00 	lds	r24, 0x0069
    12b0:	88 23       	and	r24, r24
    12b2:	c1 f4       	brne	.+48     	; 0x12e4 <__vector_7+0x64>
			{
				if(Hrs == 0)
    12b4:	80 91 68 00 	lds	r24, 0x0068
    12b8:	88 23       	and	r24, r24
    12ba:	41 f4       	brne	.+16     	; 0x12cc <__vector_7+0x4c>
				{
					PORTD |= (1<< PD0);				// Turn ON Buzzer.
    12bc:	a2 e3       	ldi	r26, 0x32	; 50
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e2 e3       	ldi	r30, 0x32	; 50
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	81 60       	ori	r24, 0x01	; 1
    12c8:	8c 93       	st	X, r24
    12ca:	4a c0       	rjmp	.+148    	; 0x1360 <__vector_7+0xe0>
					return;							// Count Down finished.
				}
				Hrs--;
    12cc:	80 91 68 00 	lds	r24, 0x0068
    12d0:	81 50       	subi	r24, 0x01	; 1
    12d2:	80 93 68 00 	sts	0x0068, r24
				Mins= 59;
    12d6:	8b e3       	ldi	r24, 0x3B	; 59
    12d8:	80 93 69 00 	sts	0x0069, r24
				Secs= 59;
    12dc:	8b e3       	ldi	r24, 0x3B	; 59
    12de:	80 93 6a 00 	sts	0x006A, r24
    12e2:	3e c0       	rjmp	.+124    	; 0x1360 <__vector_7+0xe0>
			}
			else
			{
				Mins--;
    12e4:	80 91 69 00 	lds	r24, 0x0069
    12e8:	81 50       	subi	r24, 0x01	; 1
    12ea:	80 93 69 00 	sts	0x0069, r24
				Secs= 59;
    12ee:	8b e3       	ldi	r24, 0x3B	; 59
    12f0:	80 93 6a 00 	sts	0x006A, r24
    12f4:	35 c0       	rjmp	.+106    	; 0x1360 <__vector_7+0xe0>
			}
		}
		else
		{
			Secs--;
    12f6:	80 91 6a 00 	lds	r24, 0x006A
    12fa:	81 50       	subi	r24, 0x01	; 1
    12fc:	80 93 6a 00 	sts	0x006A, r24
    1300:	2f c0       	rjmp	.+94     	; 0x1360 <__vector_7+0xe0>
	}

	/* Count Up mode */
	else
	{
		PORTD |= (1<< PD4);						// Turn ON Red led.
    1302:	a2 e3       	ldi	r26, 0x32	; 50
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e2 e3       	ldi	r30, 0x32	; 50
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	80 61       	ori	r24, 0x10	; 16
    130e:	8c 93       	st	X, r24
		PORTD &=~ (1<< PD0);					// Turn OFF Buzzer.
    1310:	a2 e3       	ldi	r26, 0x32	; 50
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e2 e3       	ldi	r30, 0x32	; 50
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	8e 7f       	andi	r24, 0xFE	; 254
    131c:	8c 93       	st	X, r24
		Secs++;
    131e:	80 91 6a 00 	lds	r24, 0x006A
    1322:	8f 5f       	subi	r24, 0xFF	; 255
    1324:	80 93 6a 00 	sts	0x006A, r24
		if(Secs >= 60)
    1328:	80 91 6a 00 	lds	r24, 0x006A
    132c:	8c 33       	cpi	r24, 0x3C	; 60
    132e:	c0 f0       	brcs	.+48     	; 0x1360 <__vector_7+0xe0>
		{
			Secs= 0;
    1330:	10 92 6a 00 	sts	0x006A, r1
			Mins++;
    1334:	80 91 69 00 	lds	r24, 0x0069
    1338:	8f 5f       	subi	r24, 0xFF	; 255
    133a:	80 93 69 00 	sts	0x0069, r24
			if (Mins >= 60)
    133e:	80 91 69 00 	lds	r24, 0x0069
    1342:	8c 33       	cpi	r24, 0x3C	; 60
    1344:	68 f0       	brcs	.+26     	; 0x1360 <__vector_7+0xe0>
			{
				Mins= 0;
    1346:	10 92 69 00 	sts	0x0069, r1
				Hrs++;
    134a:	80 91 68 00 	lds	r24, 0x0068
    134e:	8f 5f       	subi	r24, 0xFF	; 255
    1350:	80 93 68 00 	sts	0x0068, r24
				if(Hrs >= 24)
    1354:	80 91 68 00 	lds	r24, 0x0068
    1358:	88 31       	cpi	r24, 0x18	; 24
    135a:	10 f0       	brcs	.+4      	; 0x1360 <__vector_7+0xe0>
				{
					Hrs= 0;						// Reset after 24 hours.
    135c:	10 92 68 00 	sts	0x0068, r1
				}

			}
		}
	}
}
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	ff 91       	pop	r31
    1366:	ef 91       	pop	r30
    1368:	bf 91       	pop	r27
    136a:	af 91       	pop	r26
    136c:	8f 91       	pop	r24
    136e:	0f 90       	pop	r0
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	0f 90       	pop	r0
    1374:	1f 90       	pop	r1
    1376:	18 95       	reti

00001378 <INT0_Falling_Edge_Reset>:


/* Function Enable Interrupt 0 (Falling edge mode is used) */
void INT0_Falling_Edge_Reset(void)
{
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
	/* Make the connected pin to push button as input pin */
	DDRD  &=~ (1<< PD2);
    1380:	a1 e3       	ldi	r26, 0x31	; 49
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e1 e3       	ldi	r30, 0x31	; 49
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	8b 7f       	andi	r24, 0xFB	; 251
    138c:	8c 93       	st	X, r24

	/* Activate the internal pull up */
	PORTD |= (1<< PD2);
    138e:	a2 e3       	ldi	r26, 0x32	; 50
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e2 e3       	ldi	r30, 0x32	; 50
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	84 60       	ori	r24, 0x04	; 4
    139a:	8c 93       	st	X, r24

	/* Enable Falling edge */
	MCUCR |= (1<< ISC01);
    139c:	a5 e5       	ldi	r26, 0x55	; 85
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e5 e5       	ldi	r30, 0x55	; 85
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	82 60       	ori	r24, 0x02	; 2
    13a8:	8c 93       	st	X, r24
	MCUCR &=~ (1<< ISC00);
    13aa:	a5 e5       	ldi	r26, 0x55	; 85
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e5 e5       	ldi	r30, 0x55	; 85
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	8e 7f       	andi	r24, 0xFE	; 254
    13b6:	8c 93       	st	X, r24

	/* Enable INT0 & I-bit(Global Interrupt) */
	GICR  |= (1<< INT0);
    13b8:	ab e5       	ldi	r26, 0x5B	; 91
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	eb e5       	ldi	r30, 0x5B	; 91
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	80 64       	ori	r24, 0x40	; 64
    13c4:	8c 93       	st	X, r24
	SREG  |= (1<< 7);
    13c6:	af e5       	ldi	r26, 0x5F	; 95
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	ef e5       	ldi	r30, 0x5F	; 95
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	80 68       	ori	r24, 0x80	; 128
    13d2:	8c 93       	st	X, r24
}
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <__vector_1>:


/* Interrupt Service Routine for Interrupt 0 */
ISR(INT0_vect)
{
    13da:	1f 92       	push	r1
    13dc:	0f 92       	push	r0
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	0f 92       	push	r0
    13e2:	11 24       	eor	r1, r1
    13e4:	ef 93       	push	r30
    13e6:	ff 93       	push	r31
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
	/* This ISR handles if pressed the (push button PD2) Stop Watch time should be reset */

	TCNT1 = 0;
    13f0:	ec e4       	ldi	r30, 0x4C	; 76
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	11 82       	std	Z+1, r1	; 0x01
    13f6:	10 82       	st	Z, r1
	Secs = 0;
    13f8:	10 92 6a 00 	sts	0x006A, r1
	Mins = 0;
    13fc:	10 92 69 00 	sts	0x0069, r1
	Hrs = 0;
    1400:	10 92 68 00 	sts	0x0068, r1
}
    1404:	cf 91       	pop	r28
    1406:	df 91       	pop	r29
    1408:	ff 91       	pop	r31
    140a:	ef 91       	pop	r30
    140c:	0f 90       	pop	r0
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	0f 90       	pop	r0
    1412:	1f 90       	pop	r1
    1414:	18 95       	reti

00001416 <INT1_Rising_Edge_Pause>:


/* Function Enable Interrupt 1 (Rising edge mode is used) */
void INT1_Rising_Edge_Pause(void)
{
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
	/*configure Pause Button (PD3 INT1) */
	DDRD &=~ (1<< PD3);
    141e:	a1 e3       	ldi	r26, 0x31	; 49
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e1 e3       	ldi	r30, 0x31	; 49
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	87 7f       	andi	r24, 0xF7	; 247
    142a:	8c 93       	st	X, r24

	/* Enable Rising edge */
	MCUCR |= (1<< ISC10) | (1<< ISC11);
    142c:	a5 e5       	ldi	r26, 0x55	; 85
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e5 e5       	ldi	r30, 0x55	; 85
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	8c 60       	ori	r24, 0x0C	; 12
    1438:	8c 93       	st	X, r24

	/* Enable INT0 & I-bit(Global Interrupt) */
	GICR  |= (1<< INT1);
    143a:	ab e5       	ldi	r26, 0x5B	; 91
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	eb e5       	ldi	r30, 0x5B	; 91
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	80 68       	ori	r24, 0x80	; 128
    1446:	8c 93       	st	X, r24
	SREG  |= (1<< 7);
    1448:	af e5       	ldi	r26, 0x5F	; 95
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	ef e5       	ldi	r30, 0x5F	; 95
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	80 68       	ori	r24, 0x80	; 128
    1454:	8c 93       	st	X, r24

	TCNT1 = 0;					// Pauses timer.
    1456:	ec e4       	ldi	r30, 0x4C	; 76
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	11 82       	std	Z+1, r1	; 0x01
    145c:	10 82       	st	Z, r1
	PORTD &=~ (1<< PD0);		// Turn OFF Buzzer.
    145e:	a2 e3       	ldi	r26, 0x32	; 50
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e2 e3       	ldi	r30, 0x32	; 50
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	8e 7f       	andi	r24, 0xFE	; 254
    146a:	8c 93       	st	X, r24
}
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	08 95       	ret

00001472 <__vector_2>:


/* Interrupt Service Routine for Interrupt 1 */
ISR(INT1_vect)
{
    1472:	1f 92       	push	r1
    1474:	0f 92       	push	r0
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	0f 92       	push	r0
    147a:	11 24       	eor	r1, r1
    147c:	8f 93       	push	r24
    147e:	af 93       	push	r26
    1480:	bf 93       	push	r27
    1482:	ef 93       	push	r30
    1484:	ff 93       	push	r31
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
	/* This ISR handles if pressed the (push button PD3) the Stop Watch time should be paused */

	TCCR1B &= 0xF8;													// Pauses timer.
    148e:	ae e4       	ldi	r26, 0x4E	; 78
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	ee e4       	ldi	r30, 0x4E	; 78
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	88 7f       	andi	r24, 0xF8	; 248
    149a:	8c 93       	st	X, r24
	Flag_Pause= 1;
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	80 93 6c 00 	sts	0x006C, r24
}
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	ff 91       	pop	r31
    14a8:	ef 91       	pop	r30
    14aa:	bf 91       	pop	r27
    14ac:	af 91       	pop	r26
    14ae:	8f 91       	pop	r24
    14b0:	0f 90       	pop	r0
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	0f 90       	pop	r0
    14b6:	1f 90       	pop	r1
    14b8:	18 95       	reti

000014ba <INT2_Falling_Edge_Resume>:


/* Function Enable Interrupt 2 (Falling edge mode is used) */
void INT2_Falling_Edge_Resume(void)
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
	/* Make the connected pin to push button (PB2) as INPUT pin */
	DDRB  &=~ (1<< PB2);
    14c2:	a7 e3       	ldi	r26, 0x37	; 55
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e7 e3       	ldi	r30, 0x37	; 55
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	8b 7f       	andi	r24, 0xFB	; 251
    14ce:	8c 93       	st	X, r24

	/* Activate the internal pull up */
	PORTB |= (1<< PB2);
    14d0:	a8 e3       	ldi	r26, 0x38	; 56
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e8 e3       	ldi	r30, 0x38	; 56
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	84 60       	ori	r24, 0x04	; 4
    14dc:	8c 93       	st	X, r24

	/* Enable Falling edge */
	MCUCSR &= ~(1 << ISC2);
    14de:	a4 e5       	ldi	r26, 0x54	; 84
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e4 e5       	ldi	r30, 0x54	; 84
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	8f 7b       	andi	r24, 0xBF	; 191
    14ea:	8c 93       	st	X, r24

	/* Enable INT2 & I-bit(Global Interrupt) */
	GICR |= (1 << INT2);
    14ec:	ab e5       	ldi	r26, 0x5B	; 91
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	eb e5       	ldi	r30, 0x5B	; 91
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	80 62       	ori	r24, 0x20	; 32
    14f8:	8c 93       	st	X, r24
	SREG  |= (1<< 7);
    14fa:	af e5       	ldi	r26, 0x5F	; 95
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	ef e5       	ldi	r30, 0x5F	; 95
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	80 68       	ori	r24, 0x80	; 128
    1506:	8c 93       	st	X, r24
}
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <__vector_3>:


/* Interrupt Service Routine for Interrupt 2 */
ISR(INT2_vect)
{
    150e:	1f 92       	push	r1
    1510:	0f 92       	push	r0
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	0f 92       	push	r0
    1516:	11 24       	eor	r1, r1
    1518:	8f 93       	push	r24
    151a:	af 93       	push	r26
    151c:	bf 93       	push	r27
    151e:	ef 93       	push	r30
    1520:	ff 93       	push	r31
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
	/* This ISR handles if pressed the (push button PB2) Stop Watch time should be resumed */

	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10); 				// Resumed Timer1.
    152a:	ee e4       	ldi	r30, 0x4E	; 78
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	8d e0       	ldi	r24, 0x0D	; 13
    1530:	80 83       	st	Z, r24
	PORTD &=~ (1<< PD0);											// Turn OFF Buzzer.
    1532:	a2 e3       	ldi	r26, 0x32	; 50
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e2 e3       	ldi	r30, 0x32	; 50
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	8e 7f       	andi	r24, 0xFE	; 254
    153e:	8c 93       	st	X, r24
	Flag_Pause= 0;
    1540:	10 92 6c 00 	sts	0x006C, r1
}
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	ff 91       	pop	r31
    154a:	ef 91       	pop	r30
    154c:	bf 91       	pop	r27
    154e:	af 91       	pop	r26
    1550:	8f 91       	pop	r24
    1552:	0f 90       	pop	r0
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	0f 90       	pop	r0
    1558:	1f 90       	pop	r1
    155a:	18 95       	reti

0000155c <main>:
/*******************************************************************************
 *                     		  Main Program                                     *
 *******************************************************************************/

int main(void)
{
    155c:	0f 93       	push	r16
    155e:	1f 93       	push	r17
    1560:	df 93       	push	r29
    1562:	cf 93       	push	r28
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	c3 57       	subi	r28, 0x73	; 115
    156a:	d0 40       	sbci	r29, 0x00	; 0
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
	/* Configure decoder 7447 (PC0 --> PC3) as OUTPUT */
	DDRC  |= 0x0F;													// (0000 1111) Pins for binary to decoder.
    1576:	a4 e3       	ldi	r26, 0x34	; 52
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e4 e3       	ldi	r30, 0x34	; 52
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	8f 60       	ori	r24, 0x0F	; 15
    1582:	8c 93       	st	X, r24
	PORTC &= 0xF0; 													// (1111 0000) Initialize PORTC to zero.
    1584:	a5 e3       	ldi	r26, 0x35	; 53
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e5 e3       	ldi	r30, 0x35	; 53
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	80 7f       	andi	r24, 0xF0	; 240
    1590:	8c 93       	st	X, r24

	/* Configure 7-segment (PA0 --> PA5) as OUTPUT */
	DDRA  |= 0x3F;													// (0011 1111) Pins for Enable OR Disable each 7-segment.
    1592:	aa e3       	ldi	r26, 0x3A	; 58
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	ea e3       	ldi	r30, 0x3A	; 58
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	8f 63       	ori	r24, 0x3F	; 63
    159e:	8c 93       	st	X, r24

	/* Configure (PD2, PD3 as INPUT) & (PD0, PD4, PD5 as OUTPUT) */
	DDRD  &= ~((1 << PD2) | (1 << PD3)); 							// PD2, PD3 as INPUT (Reset & Pause button).
    15a0:	a1 e3       	ldi	r26, 0x31	; 49
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e1 e3       	ldi	r30, 0x31	; 49
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	83 7f       	andi	r24, 0xF3	; 243
    15ac:	8c 93       	st	X, r24
	DDRD  |= (1 << PD0) | (1 << PD4) | (1 << PD5); 					// PD0= Buzzer, PD4= Red LED, PD5= yellow LED.
    15ae:	a1 e3       	ldi	r26, 0x31	; 49
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e1 e3       	ldi	r30, 0x31	; 49
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	81 63       	ori	r24, 0x31	; 49
    15ba:	8c 93       	st	X, r24

	/* Configure PORTB as INPUT (Increment & Decrement button) */
	DDRB   = 0x00;
    15bc:	e7 e3       	ldi	r30, 0x37	; 55
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	10 82       	st	Z, r1
	PORTB  = 0xFF; 													// (1111 1111) Enable pull-ups on PORTB.
    15c2:	e8 e3       	ldi	r30, 0x38	; 56
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	8f ef       	ldi	r24, 0xFF	; 255
    15c8:	80 83       	st	Z, r24

	/* Enable global interrupts */
	SREG  |= (1 << 7);
    15ca:	af e5       	ldi	r26, 0x5F	; 95
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	ef e5       	ldi	r30, 0x5F	; 95
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	80 68       	ori	r24, 0x80	; 128
    15d6:	8c 93       	st	X, r24

	/* Turn ON red LED */
	PORTD |= (1 << PD4);
    15d8:	a2 e3       	ldi	r26, 0x32	; 50
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e2 e3       	ldi	r30, 0x32	; 50
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	80 61       	ori	r24, 0x10	; 16
    15e4:	8c 93       	st	X, r24

	/* Turn OFF yellow LED */
	PORTD &= ~(1 << PD5);
    15e6:	a2 e3       	ldi	r26, 0x32	; 50
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e2 e3       	ldi	r30, 0x32	; 50
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	8f 7d       	andi	r24, 0xDF	; 223
    15f2:	8c 93       	st	X, r24

	/* Calling all function that we build */
	Timer1_CTC_Init();
    15f4:	0e 94 20 09 	call	0x1240	; 0x1240 <Timer1_CTC_Init>
	INT0_Falling_Edge_Reset();
    15f8:	0e 94 bc 09 	call	0x1378	; 0x1378 <INT0_Falling_Edge_Reset>
	INT1_Rising_Edge_Pause();
    15fc:	0e 94 0b 0a 	call	0x1416	; 0x1416 <INT1_Rising_Edge_Pause>
	INT2_Falling_Edge_Resume();
    1600:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <INT2_Falling_Edge_Resume>

	for(;;)
	{
		Time();
    1604:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Time>

		/* Enter countdown mode if PB7 is pressed */
		if ( !(PINB & (1 << PB7)) )
    1608:	e6 e3       	ldi	r30, 0x36	; 54
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	88 23       	and	r24, r24
    1610:	0c f4       	brge	.+2      	; 0x1614 <main+0xb8>
    1612:	e1 c5       	rjmp	.+3010   	; 0x21d6 <main+0xc7a>
    1614:	fe 01       	movw	r30, r28
    1616:	e3 59       	subi	r30, 0x93	; 147
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	a0 ef       	ldi	r26, 0xF0	; 240
    1620:	b1 e4       	ldi	r27, 0x41	; 65
    1622:	80 83       	st	Z, r24
    1624:	91 83       	std	Z+1, r25	; 0x01
    1626:	a2 83       	std	Z+2, r26	; 0x02
    1628:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162a:	8e 01       	movw	r16, r28
    162c:	07 59       	subi	r16, 0x97	; 151
    162e:	1f 4f       	sbci	r17, 0xFF	; 255
    1630:	fe 01       	movw	r30, r28
    1632:	e3 59       	subi	r30, 0x93	; 147
    1634:	ff 4f       	sbci	r31, 0xFF	; 255
    1636:	60 81       	ld	r22, Z
    1638:	71 81       	ldd	r23, Z+1	; 0x01
    163a:	82 81       	ldd	r24, Z+2	; 0x02
    163c:	93 81       	ldd	r25, Z+3	; 0x03
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	4a e7       	ldi	r20, 0x7A	; 122
    1644:	55 e4       	ldi	r21, 0x45	; 69
    1646:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	f8 01       	movw	r30, r16
    1650:	80 83       	st	Z, r24
    1652:	91 83       	std	Z+1, r25	; 0x01
    1654:	a2 83       	std	Z+2, r26	; 0x02
    1656:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1658:	fe 01       	movw	r30, r28
    165a:	e7 59       	subi	r30, 0x97	; 151
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	60 81       	ld	r22, Z
    1660:	71 81       	ldd	r23, Z+1	; 0x01
    1662:	82 81       	ldd	r24, Z+2	; 0x02
    1664:	93 81       	ldd	r25, Z+3	; 0x03
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	40 e8       	ldi	r20, 0x80	; 128
    166c:	5f e3       	ldi	r21, 0x3F	; 63
    166e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1672:	88 23       	and	r24, r24
    1674:	44 f4       	brge	.+16     	; 0x1686 <main+0x12a>
		__ticks = 1;
    1676:	fe 01       	movw	r30, r28
    1678:	e9 59       	subi	r30, 0x99	; 153
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	91 83       	std	Z+1, r25	; 0x01
    1682:	80 83       	st	Z, r24
    1684:	64 c0       	rjmp	.+200    	; 0x174e <main+0x1f2>
	else if (__tmp > 65535)
    1686:	fe 01       	movw	r30, r28
    1688:	e7 59       	subi	r30, 0x97	; 151
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	60 81       	ld	r22, Z
    168e:	71 81       	ldd	r23, Z+1	; 0x01
    1690:	82 81       	ldd	r24, Z+2	; 0x02
    1692:	93 81       	ldd	r25, Z+3	; 0x03
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	3f ef       	ldi	r19, 0xFF	; 255
    1698:	4f e7       	ldi	r20, 0x7F	; 127
    169a:	57 e4       	ldi	r21, 0x47	; 71
    169c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a0:	18 16       	cp	r1, r24
    16a2:	0c f0       	brlt	.+2      	; 0x16a6 <main+0x14a>
    16a4:	43 c0       	rjmp	.+134    	; 0x172c <main+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a6:	fe 01       	movw	r30, r28
    16a8:	e3 59       	subi	r30, 0x93	; 147
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	60 81       	ld	r22, Z
    16ae:	71 81       	ldd	r23, Z+1	; 0x01
    16b0:	82 81       	ldd	r24, Z+2	; 0x02
    16b2:	93 81       	ldd	r25, Z+3	; 0x03
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 e2       	ldi	r20, 0x20	; 32
    16ba:	51 e4       	ldi	r21, 0x41	; 65
    16bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	8e 01       	movw	r16, r28
    16c6:	09 59       	subi	r16, 0x99	; 153
    16c8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ca:	bc 01       	movw	r22, r24
    16cc:	cd 01       	movw	r24, r26
    16ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d2:	dc 01       	movw	r26, r24
    16d4:	cb 01       	movw	r24, r22
    16d6:	f8 01       	movw	r30, r16
    16d8:	91 83       	std	Z+1, r25	; 0x01
    16da:	80 83       	st	Z, r24
    16dc:	1f c0       	rjmp	.+62     	; 0x171c <main+0x1c0>
    16de:	fe 01       	movw	r30, r28
    16e0:	eb 59       	subi	r30, 0x9B	; 155
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	80 e9       	ldi	r24, 0x90	; 144
    16e6:	91 e0       	ldi	r25, 0x01	; 1
    16e8:	91 83       	std	Z+1, r25	; 0x01
    16ea:	80 83       	st	Z, r24
    16ec:	fe 01       	movw	r30, r28
    16ee:	eb 59       	subi	r30, 0x9B	; 155
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	80 81       	ld	r24, Z
    16f4:	91 81       	ldd	r25, Z+1	; 0x01
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <main+0x19a>
    16fa:	fe 01       	movw	r30, r28
    16fc:	eb 59       	subi	r30, 0x9B	; 155
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	91 83       	std	Z+1, r25	; 0x01
    1702:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1704:	de 01       	movw	r26, r28
    1706:	a9 59       	subi	r26, 0x99	; 153
    1708:	bf 4f       	sbci	r27, 0xFF	; 255
    170a:	fe 01       	movw	r30, r28
    170c:	e9 59       	subi	r30, 0x99	; 153
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	80 81       	ld	r24, Z
    1712:	91 81       	ldd	r25, Z+1	; 0x01
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	11 96       	adiw	r26, 0x01	; 1
    1718:	9c 93       	st	X, r25
    171a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171c:	fe 01       	movw	r30, r28
    171e:	e9 59       	subi	r30, 0x99	; 153
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	80 81       	ld	r24, Z
    1724:	91 81       	ldd	r25, Z+1	; 0x01
    1726:	00 97       	sbiw	r24, 0x00	; 0
    1728:	d1 f6       	brne	.-76     	; 0x16de <main+0x182>
    172a:	28 c0       	rjmp	.+80     	; 0x177c <main+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172c:	8e 01       	movw	r16, r28
    172e:	09 59       	subi	r16, 0x99	; 153
    1730:	1f 4f       	sbci	r17, 0xFF	; 255
    1732:	fe 01       	movw	r30, r28
    1734:	e7 59       	subi	r30, 0x97	; 151
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	60 81       	ld	r22, Z
    173a:	71 81       	ldd	r23, Z+1	; 0x01
    173c:	82 81       	ldd	r24, Z+2	; 0x02
    173e:	93 81       	ldd	r25, Z+3	; 0x03
    1740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	f8 01       	movw	r30, r16
    174a:	91 83       	std	Z+1, r25	; 0x01
    174c:	80 83       	st	Z, r24
    174e:	de 01       	movw	r26, r28
    1750:	ad 59       	subi	r26, 0x9D	; 157
    1752:	bf 4f       	sbci	r27, 0xFF	; 255
    1754:	fe 01       	movw	r30, r28
    1756:	e9 59       	subi	r30, 0x99	; 153
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	80 81       	ld	r24, Z
    175c:	91 81       	ldd	r25, Z+1	; 0x01
    175e:	11 96       	adiw	r26, 0x01	; 1
    1760:	9c 93       	st	X, r25
    1762:	8e 93       	st	-X, r24
    1764:	fe 01       	movw	r30, r28
    1766:	ed 59       	subi	r30, 0x9D	; 157
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	80 81       	ld	r24, Z
    176c:	91 81       	ldd	r25, Z+1	; 0x01
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	f1 f7       	brne	.-4      	; 0x176e <main+0x212>
    1772:	fe 01       	movw	r30, r28
    1774:	ed 59       	subi	r30, 0x9D	; 157
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	91 83       	std	Z+1, r25	; 0x01
    177a:	80 83       	st	Z, r24
		{
			_delay_ms(30);							// De-bouncing delay.
			if ( !(PINB & (1 << PB7)) )				// Second check due to switch de-bouncing
    177c:	e6 e3       	ldi	r30, 0x36	; 54
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	88 23       	and	r24, r24
    1784:	0c f4       	brge	.+2      	; 0x1788 <main+0x22c>
    1786:	27 c5       	rjmp	.+2638   	; 0x21d6 <main+0xc7a>
			{
				Flag_Countdown_Mode ^= 1;				// Count down= 1.
    1788:	90 91 6b 00 	lds	r25, 0x006B
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	89 27       	eor	r24, r25
    1790:	80 93 6b 00 	sts	0x006B, r24
				PORTD ^= (1 << PD5); 				// Set countdown mode LED.
    1794:	a2 e3       	ldi	r26, 0x32	; 50
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e2 e3       	ldi	r30, 0x32	; 50
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	90 81       	ld	r25, Z
    179e:	80 e2       	ldi	r24, 0x20	; 32
    17a0:	89 27       	eor	r24, r25
    17a2:	8c 93       	st	X, r24
				PORTD ^= (1 << PD4);  				// Turn off normal mode LED.
    17a4:	a2 e3       	ldi	r26, 0x32	; 50
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e2 e3       	ldi	r30, 0x32	; 50
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	90 81       	ld	r25, Z
    17ae:	80 e1       	ldi	r24, 0x10	; 16
    17b0:	89 27       	eor	r24, r25
    17b2:	8c 93       	st	X, r24
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <main+0x25e>
				while( !(PINB & (1 << PB7)) )		// Stay in countdown mode while button PB7 is pressed.
				{Time();};
    17b6:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Time>
			if ( !(PINB & (1 << PB7)) )				// Second check due to switch de-bouncing
			{
				Flag_Countdown_Mode ^= 1;				// Count down= 1.
				PORTD ^= (1 << PD5); 				// Set countdown mode LED.
				PORTD ^= (1 << PD4);  				// Turn off normal mode LED.
				while( !(PINB & (1 << PB7)) )		// Stay in countdown mode while button PB7 is pressed.
    17ba:	e6 e3       	ldi	r30, 0x36	; 54
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	88 23       	and	r24, r24
    17c2:	cc f7       	brge	.-14     	; 0x17b6 <main+0x25a>
    17c4:	08 c5       	rjmp	.+2576   	; 0x21d6 <main+0xc7a>


		while (Flag_Pause == 1)
		{

			PORTD &= ~(1 << PD0);  					// Turn off BUZZER.
    17c6:	a2 e3       	ldi	r26, 0x32	; 50
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e2 e3       	ldi	r30, 0x32	; 50
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	8e 7f       	andi	r24, 0xFE	; 254
    17d2:	8c 93       	st	X, r24
			Time();									// Continuously update the display.
    17d4:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Time>

			/* Enter countdown mode if PB7 is pressed */
			if ( !(PINB & (1 << PB7)) )
    17d8:	e6 e3       	ldi	r30, 0x36	; 54
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	88 23       	and	r24, r24
    17e0:	0c f4       	brge	.+2      	; 0x17e4 <main+0x288>
    17e2:	d7 c0       	rjmp	.+430    	; 0x1992 <main+0x436>
    17e4:	fe 01       	movw	r30, r28
    17e6:	e1 5a       	subi	r30, 0xA1	; 161
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	a0 ef       	ldi	r26, 0xF0	; 240
    17f0:	b1 e4       	ldi	r27, 0x41	; 65
    17f2:	80 83       	st	Z, r24
    17f4:	91 83       	std	Z+1, r25	; 0x01
    17f6:	a2 83       	std	Z+2, r26	; 0x02
    17f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fa:	8e 01       	movw	r16, r28
    17fc:	05 5a       	subi	r16, 0xA5	; 165
    17fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1800:	fe 01       	movw	r30, r28
    1802:	e1 5a       	subi	r30, 0xA1	; 161
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	60 81       	ld	r22, Z
    1808:	71 81       	ldd	r23, Z+1	; 0x01
    180a:	82 81       	ldd	r24, Z+2	; 0x02
    180c:	93 81       	ldd	r25, Z+3	; 0x03
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	4a e7       	ldi	r20, 0x7A	; 122
    1814:	55 e4       	ldi	r21, 0x45	; 69
    1816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	f8 01       	movw	r30, r16
    1820:	80 83       	st	Z, r24
    1822:	91 83       	std	Z+1, r25	; 0x01
    1824:	a2 83       	std	Z+2, r26	; 0x02
    1826:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1828:	fe 01       	movw	r30, r28
    182a:	e5 5a       	subi	r30, 0xA5	; 165
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	60 81       	ld	r22, Z
    1830:	71 81       	ldd	r23, Z+1	; 0x01
    1832:	82 81       	ldd	r24, Z+2	; 0x02
    1834:	93 81       	ldd	r25, Z+3	; 0x03
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	40 e8       	ldi	r20, 0x80	; 128
    183c:	5f e3       	ldi	r21, 0x3F	; 63
    183e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1842:	88 23       	and	r24, r24
    1844:	44 f4       	brge	.+16     	; 0x1856 <main+0x2fa>
		__ticks = 1;
    1846:	fe 01       	movw	r30, r28
    1848:	e7 5a       	subi	r30, 0xA7	; 167
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	91 83       	std	Z+1, r25	; 0x01
    1852:	80 83       	st	Z, r24
    1854:	64 c0       	rjmp	.+200    	; 0x191e <main+0x3c2>
	else if (__tmp > 65535)
    1856:	fe 01       	movw	r30, r28
    1858:	e5 5a       	subi	r30, 0xA5	; 165
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	60 81       	ld	r22, Z
    185e:	71 81       	ldd	r23, Z+1	; 0x01
    1860:	82 81       	ldd	r24, Z+2	; 0x02
    1862:	93 81       	ldd	r25, Z+3	; 0x03
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	3f ef       	ldi	r19, 0xFF	; 255
    1868:	4f e7       	ldi	r20, 0x7F	; 127
    186a:	57 e4       	ldi	r21, 0x47	; 71
    186c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1870:	18 16       	cp	r1, r24
    1872:	0c f0       	brlt	.+2      	; 0x1876 <main+0x31a>
    1874:	43 c0       	rjmp	.+134    	; 0x18fc <main+0x3a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1876:	fe 01       	movw	r30, r28
    1878:	e1 5a       	subi	r30, 0xA1	; 161
    187a:	ff 4f       	sbci	r31, 0xFF	; 255
    187c:	60 81       	ld	r22, Z
    187e:	71 81       	ldd	r23, Z+1	; 0x01
    1880:	82 81       	ldd	r24, Z+2	; 0x02
    1882:	93 81       	ldd	r25, Z+3	; 0x03
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e2       	ldi	r20, 0x20	; 32
    188a:	51 e4       	ldi	r21, 0x41	; 65
    188c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	8e 01       	movw	r16, r28
    1896:	07 5a       	subi	r16, 0xA7	; 167
    1898:	1f 4f       	sbci	r17, 0xFF	; 255
    189a:	bc 01       	movw	r22, r24
    189c:	cd 01       	movw	r24, r26
    189e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	f8 01       	movw	r30, r16
    18a8:	91 83       	std	Z+1, r25	; 0x01
    18aa:	80 83       	st	Z, r24
    18ac:	1f c0       	rjmp	.+62     	; 0x18ec <main+0x390>
    18ae:	fe 01       	movw	r30, r28
    18b0:	e9 5a       	subi	r30, 0xA9	; 169
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	80 e9       	ldi	r24, 0x90	; 144
    18b6:	91 e0       	ldi	r25, 0x01	; 1
    18b8:	91 83       	std	Z+1, r25	; 0x01
    18ba:	80 83       	st	Z, r24
    18bc:	fe 01       	movw	r30, r28
    18be:	e9 5a       	subi	r30, 0xA9	; 169
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	80 81       	ld	r24, Z
    18c4:	91 81       	ldd	r25, Z+1	; 0x01
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <main+0x36a>
    18ca:	fe 01       	movw	r30, r28
    18cc:	e9 5a       	subi	r30, 0xA9	; 169
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	91 83       	std	Z+1, r25	; 0x01
    18d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d4:	de 01       	movw	r26, r28
    18d6:	a7 5a       	subi	r26, 0xA7	; 167
    18d8:	bf 4f       	sbci	r27, 0xFF	; 255
    18da:	fe 01       	movw	r30, r28
    18dc:	e7 5a       	subi	r30, 0xA7	; 167
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	80 81       	ld	r24, Z
    18e2:	91 81       	ldd	r25, Z+1	; 0x01
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	11 96       	adiw	r26, 0x01	; 1
    18e8:	9c 93       	st	X, r25
    18ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ec:	fe 01       	movw	r30, r28
    18ee:	e7 5a       	subi	r30, 0xA7	; 167
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	80 81       	ld	r24, Z
    18f4:	91 81       	ldd	r25, Z+1	; 0x01
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	d1 f6       	brne	.-76     	; 0x18ae <main+0x352>
    18fa:	28 c0       	rjmp	.+80     	; 0x194c <main+0x3f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18fc:	8e 01       	movw	r16, r28
    18fe:	07 5a       	subi	r16, 0xA7	; 167
    1900:	1f 4f       	sbci	r17, 0xFF	; 255
    1902:	fe 01       	movw	r30, r28
    1904:	e5 5a       	subi	r30, 0xA5	; 165
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	60 81       	ld	r22, Z
    190a:	71 81       	ldd	r23, Z+1	; 0x01
    190c:	82 81       	ldd	r24, Z+2	; 0x02
    190e:	93 81       	ldd	r25, Z+3	; 0x03
    1910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	f8 01       	movw	r30, r16
    191a:	91 83       	std	Z+1, r25	; 0x01
    191c:	80 83       	st	Z, r24
    191e:	de 01       	movw	r26, r28
    1920:	ab 5a       	subi	r26, 0xAB	; 171
    1922:	bf 4f       	sbci	r27, 0xFF	; 255
    1924:	fe 01       	movw	r30, r28
    1926:	e7 5a       	subi	r30, 0xA7	; 167
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	80 81       	ld	r24, Z
    192c:	91 81       	ldd	r25, Z+1	; 0x01
    192e:	11 96       	adiw	r26, 0x01	; 1
    1930:	9c 93       	st	X, r25
    1932:	8e 93       	st	-X, r24
    1934:	fe 01       	movw	r30, r28
    1936:	eb 5a       	subi	r30, 0xAB	; 171
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	80 81       	ld	r24, Z
    193c:	91 81       	ldd	r25, Z+1	; 0x01
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	f1 f7       	brne	.-4      	; 0x193e <main+0x3e2>
    1942:	fe 01       	movw	r30, r28
    1944:	eb 5a       	subi	r30, 0xAB	; 171
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	91 83       	std	Z+1, r25	; 0x01
    194a:	80 83       	st	Z, r24
			{
				_delay_ms(30);						// De-bouncing delay.
				if ( !(PINB & (1 << PB7)) )			// Second check due to switch de-bouncing
    194c:	e6 e3       	ldi	r30, 0x36	; 54
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	88 23       	and	r24, r24
    1954:	f4 f0       	brlt	.+60     	; 0x1992 <main+0x436>
				{
					Flag_Countdown_Mode ^= 1;			// Count down= 1.
    1956:	90 91 6b 00 	lds	r25, 0x006B
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	89 27       	eor	r24, r25
    195e:	80 93 6b 00 	sts	0x006B, r24
					PORTD ^= (1 << PD5); 			// Set countdown mode LED.
    1962:	a2 e3       	ldi	r26, 0x32	; 50
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e2 e3       	ldi	r30, 0x32	; 50
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	90 81       	ld	r25, Z
    196c:	80 e2       	ldi	r24, 0x20	; 32
    196e:	89 27       	eor	r24, r25
    1970:	8c 93       	st	X, r24
					PORTD ^= (1 << PD4);  			// Turn off normal mode LED.
    1972:	a2 e3       	ldi	r26, 0x32	; 50
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e2 e3       	ldi	r30, 0x32	; 50
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	90 81       	ld	r25, Z
    197c:	80 e1       	ldi	r24, 0x10	; 16
    197e:	89 27       	eor	r24, r25
    1980:	8c 93       	st	X, r24
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <main+0x42c>
					while( !(PINB & (1 << PB7)) )	// Stay in countdown mode while button PB7 is pressed.
					{Time();};
    1984:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Time>
				if ( !(PINB & (1 << PB7)) )			// Second check due to switch de-bouncing
				{
					Flag_Countdown_Mode ^= 1;			// Count down= 1.
					PORTD ^= (1 << PD5); 			// Set countdown mode LED.
					PORTD ^= (1 << PD4);  			// Turn off normal mode LED.
					while( !(PINB & (1 << PB7)) )	// Stay in countdown mode while button PB7 is pressed.
    1988:	e6 e3       	ldi	r30, 0x36	; 54
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	88 23       	and	r24, r24
    1990:	cc f7       	brge	.-14     	; 0x1984 <main+0x428>
				}

			}


			Time();									// Continuously update the display.
    1992:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Time>

			/* Hours increment */
			if ( !(PINB & INCREMENT_HOURS) )
    1996:	e6 e3       	ldi	r30, 0x36	; 54
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	88 2f       	mov	r24, r24
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	82 70       	andi	r24, 0x02	; 2
    19a2:	90 70       	andi	r25, 0x00	; 0
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	09 f0       	breq	.+2      	; 0x19aa <main+0x44e>
    19a8:	d5 c0       	rjmp	.+426    	; 0x1b54 <main+0x5f8>
    19aa:	fe 01       	movw	r30, r28
    19ac:	ef 5a       	subi	r30, 0xAF	; 175
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a0 ef       	ldi	r26, 0xF0	; 240
    19b6:	b1 e4       	ldi	r27, 0x41	; 65
    19b8:	80 83       	st	Z, r24
    19ba:	91 83       	std	Z+1, r25	; 0x01
    19bc:	a2 83       	std	Z+2, r26	; 0x02
    19be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c0:	8e 01       	movw	r16, r28
    19c2:	03 5b       	subi	r16, 0xB3	; 179
    19c4:	1f 4f       	sbci	r17, 0xFF	; 255
    19c6:	fe 01       	movw	r30, r28
    19c8:	ef 5a       	subi	r30, 0xAF	; 175
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	60 81       	ld	r22, Z
    19ce:	71 81       	ldd	r23, Z+1	; 0x01
    19d0:	82 81       	ldd	r24, Z+2	; 0x02
    19d2:	93 81       	ldd	r25, Z+3	; 0x03
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	4a e7       	ldi	r20, 0x7A	; 122
    19da:	55 e4       	ldi	r21, 0x45	; 69
    19dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	f8 01       	movw	r30, r16
    19e6:	80 83       	st	Z, r24
    19e8:	91 83       	std	Z+1, r25	; 0x01
    19ea:	a2 83       	std	Z+2, r26	; 0x02
    19ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19ee:	fe 01       	movw	r30, r28
    19f0:	e3 5b       	subi	r30, 0xB3	; 179
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	60 81       	ld	r22, Z
    19f6:	71 81       	ldd	r23, Z+1	; 0x01
    19f8:	82 81       	ldd	r24, Z+2	; 0x02
    19fa:	93 81       	ldd	r25, Z+3	; 0x03
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e8       	ldi	r20, 0x80	; 128
    1a02:	5f e3       	ldi	r21, 0x3F	; 63
    1a04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a08:	88 23       	and	r24, r24
    1a0a:	44 f4       	brge	.+16     	; 0x1a1c <main+0x4c0>
		__ticks = 1;
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	e5 5b       	subi	r30, 0xB5	; 181
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	91 83       	std	Z+1, r25	; 0x01
    1a18:	80 83       	st	Z, r24
    1a1a:	64 c0       	rjmp	.+200    	; 0x1ae4 <main+0x588>
	else if (__tmp > 65535)
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	e3 5b       	subi	r30, 0xB3	; 179
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	60 81       	ld	r22, Z
    1a24:	71 81       	ldd	r23, Z+1	; 0x01
    1a26:	82 81       	ldd	r24, Z+2	; 0x02
    1a28:	93 81       	ldd	r25, Z+3	; 0x03
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	3f ef       	ldi	r19, 0xFF	; 255
    1a2e:	4f e7       	ldi	r20, 0x7F	; 127
    1a30:	57 e4       	ldi	r21, 0x47	; 71
    1a32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a36:	18 16       	cp	r1, r24
    1a38:	0c f0       	brlt	.+2      	; 0x1a3c <main+0x4e0>
    1a3a:	43 c0       	rjmp	.+134    	; 0x1ac2 <main+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	ef 5a       	subi	r30, 0xAF	; 175
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	60 81       	ld	r22, Z
    1a44:	71 81       	ldd	r23, Z+1	; 0x01
    1a46:	82 81       	ldd	r24, Z+2	; 0x02
    1a48:	93 81       	ldd	r25, Z+3	; 0x03
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e2       	ldi	r20, 0x20	; 32
    1a50:	51 e4       	ldi	r21, 0x41	; 65
    1a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	8e 01       	movw	r16, r28
    1a5c:	05 5b       	subi	r16, 0xB5	; 181
    1a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a60:	bc 01       	movw	r22, r24
    1a62:	cd 01       	movw	r24, r26
    1a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	f8 01       	movw	r30, r16
    1a6e:	91 83       	std	Z+1, r25	; 0x01
    1a70:	80 83       	st	Z, r24
    1a72:	1f c0       	rjmp	.+62     	; 0x1ab2 <main+0x556>
    1a74:	fe 01       	movw	r30, r28
    1a76:	e7 5b       	subi	r30, 0xB7	; 183
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	80 e9       	ldi	r24, 0x90	; 144
    1a7c:	91 e0       	ldi	r25, 0x01	; 1
    1a7e:	91 83       	std	Z+1, r25	; 0x01
    1a80:	80 83       	st	Z, r24
    1a82:	fe 01       	movw	r30, r28
    1a84:	e7 5b       	subi	r30, 0xB7	; 183
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	80 81       	ld	r24, Z
    1a8a:	91 81       	ldd	r25, Z+1	; 0x01
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <main+0x530>
    1a90:	fe 01       	movw	r30, r28
    1a92:	e7 5b       	subi	r30, 0xB7	; 183
    1a94:	ff 4f       	sbci	r31, 0xFF	; 255
    1a96:	91 83       	std	Z+1, r25	; 0x01
    1a98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9a:	de 01       	movw	r26, r28
    1a9c:	a5 5b       	subi	r26, 0xB5	; 181
    1a9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	e5 5b       	subi	r30, 0xB5	; 181
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	80 81       	ld	r24, Z
    1aa8:	91 81       	ldd	r25, Z+1	; 0x01
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	11 96       	adiw	r26, 0x01	; 1
    1aae:	9c 93       	st	X, r25
    1ab0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	e5 5b       	subi	r30, 0xB5	; 181
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	80 81       	ld	r24, Z
    1aba:	91 81       	ldd	r25, Z+1	; 0x01
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	d1 f6       	brne	.-76     	; 0x1a74 <main+0x518>
    1ac0:	28 c0       	rjmp	.+80     	; 0x1b12 <main+0x5b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac2:	8e 01       	movw	r16, r28
    1ac4:	05 5b       	subi	r16, 0xB5	; 181
    1ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac8:	fe 01       	movw	r30, r28
    1aca:	e3 5b       	subi	r30, 0xB3	; 179
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	60 81       	ld	r22, Z
    1ad0:	71 81       	ldd	r23, Z+1	; 0x01
    1ad2:	82 81       	ldd	r24, Z+2	; 0x02
    1ad4:	93 81       	ldd	r25, Z+3	; 0x03
    1ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	f8 01       	movw	r30, r16
    1ae0:	91 83       	std	Z+1, r25	; 0x01
    1ae2:	80 83       	st	Z, r24
    1ae4:	de 01       	movw	r26, r28
    1ae6:	a9 5b       	subi	r26, 0xB9	; 185
    1ae8:	bf 4f       	sbci	r27, 0xFF	; 255
    1aea:	fe 01       	movw	r30, r28
    1aec:	e5 5b       	subi	r30, 0xB5	; 181
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	80 81       	ld	r24, Z
    1af2:	91 81       	ldd	r25, Z+1	; 0x01
    1af4:	11 96       	adiw	r26, 0x01	; 1
    1af6:	9c 93       	st	X, r25
    1af8:	8e 93       	st	-X, r24
    1afa:	fe 01       	movw	r30, r28
    1afc:	e9 5b       	subi	r30, 0xB9	; 185
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	80 81       	ld	r24, Z
    1b02:	91 81       	ldd	r25, Z+1	; 0x01
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	f1 f7       	brne	.-4      	; 0x1b04 <main+0x5a8>
    1b08:	fe 01       	movw	r30, r28
    1b0a:	e9 5b       	subi	r30, 0xB9	; 185
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	91 83       	std	Z+1, r25	; 0x01
    1b10:	80 83       	st	Z, r24
			{
				_delay_ms(30);						// De-bouncing delay.

				if ( !(PINB & INCREMENT_HOURS) )	// Second check due to switch de-bouncing
    1b12:	e6 e3       	ldi	r30, 0x36	; 54
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	88 2f       	mov	r24, r24
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	82 70       	andi	r24, 0x02	; 2
    1b1e:	90 70       	andi	r25, 0x00	; 0
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	c1 f4       	brne	.+48     	; 0x1b54 <main+0x5f8>
				{
					Hrs = (Hrs + 1) % 24;
    1b24:	80 91 68 00 	lds	r24, 0x0068
    1b28:	88 2f       	mov	r24, r24
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	01 96       	adiw	r24, 0x01	; 1
    1b2e:	28 e1       	ldi	r18, 0x18	; 24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	b9 01       	movw	r22, r18
    1b34:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__divmodhi4>
    1b38:	80 93 68 00 	sts	0x0068, r24
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <main+0x5e6>
					while( !(PINB & INCREMENT_HOURS) )
					{Time();};
    1b3e:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Time>
				_delay_ms(30);						// De-bouncing delay.

				if ( !(PINB & INCREMENT_HOURS) )	// Second check due to switch de-bouncing
				{
					Hrs = (Hrs + 1) % 24;
					while( !(PINB & INCREMENT_HOURS) )
    1b42:	e6 e3       	ldi	r30, 0x36	; 54
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	88 2f       	mov	r24, r24
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	82 70       	andi	r24, 0x02	; 2
    1b4e:	90 70       	andi	r25, 0x00	; 0
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	a9 f3       	breq	.-22     	; 0x1b3e <main+0x5e2>
				}

			}

			/* Hours decrement */
			if ( !(PINB & DECREMENT_HOURS) )
    1b54:	e6 e3       	ldi	r30, 0x36	; 54
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	88 2f       	mov	r24, r24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	81 70       	andi	r24, 0x01	; 1
    1b60:	90 70       	andi	r25, 0x00	; 0
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	09 f0       	breq	.+2      	; 0x1b68 <main+0x60c>
    1b66:	af c0       	rjmp	.+350    	; 0x1cc6 <main+0x76a>
    1b68:	fe 01       	movw	r30, r28
    1b6a:	ed 5b       	subi	r30, 0xBD	; 189
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	a0 ef       	ldi	r26, 0xF0	; 240
    1b74:	b1 e4       	ldi	r27, 0x41	; 65
    1b76:	80 83       	st	Z, r24
    1b78:	91 83       	std	Z+1, r25	; 0x01
    1b7a:	a2 83       	std	Z+2, r26	; 0x02
    1b7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7e:	8e 01       	movw	r16, r28
    1b80:	01 5c       	subi	r16, 0xC1	; 193
    1b82:	1f 4f       	sbci	r17, 0xFF	; 255
    1b84:	fe 01       	movw	r30, r28
    1b86:	ed 5b       	subi	r30, 0xBD	; 189
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	60 81       	ld	r22, Z
    1b8c:	71 81       	ldd	r23, Z+1	; 0x01
    1b8e:	82 81       	ldd	r24, Z+2	; 0x02
    1b90:	93 81       	ldd	r25, Z+3	; 0x03
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	4a e7       	ldi	r20, 0x7A	; 122
    1b98:	55 e4       	ldi	r21, 0x45	; 69
    1b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	f8 01       	movw	r30, r16
    1ba4:	80 83       	st	Z, r24
    1ba6:	91 83       	std	Z+1, r25	; 0x01
    1ba8:	a2 83       	std	Z+2, r26	; 0x02
    1baa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bac:	fe 01       	movw	r30, r28
    1bae:	ff 96       	adiw	r30, 0x3f	; 63
    1bb0:	60 81       	ld	r22, Z
    1bb2:	71 81       	ldd	r23, Z+1	; 0x01
    1bb4:	82 81       	ldd	r24, Z+2	; 0x02
    1bb6:	93 81       	ldd	r25, Z+3	; 0x03
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e8       	ldi	r20, 0x80	; 128
    1bbe:	5f e3       	ldi	r21, 0x3F	; 63
    1bc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc4:	88 23       	and	r24, r24
    1bc6:	2c f4       	brge	.+10     	; 0x1bd2 <main+0x676>
		__ticks = 1;
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	9e af       	std	Y+62, r25	; 0x3e
    1bce:	8d af       	std	Y+61, r24	; 0x3d
    1bd0:	46 c0       	rjmp	.+140    	; 0x1c5e <main+0x702>
	else if (__tmp > 65535)
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	ff 96       	adiw	r30, 0x3f	; 63
    1bd6:	60 81       	ld	r22, Z
    1bd8:	71 81       	ldd	r23, Z+1	; 0x01
    1bda:	82 81       	ldd	r24, Z+2	; 0x02
    1bdc:	93 81       	ldd	r25, Z+3	; 0x03
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	3f ef       	ldi	r19, 0xFF	; 255
    1be2:	4f e7       	ldi	r20, 0x7F	; 127
    1be4:	57 e4       	ldi	r21, 0x47	; 71
    1be6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bea:	18 16       	cp	r1, r24
    1bec:	64 f5       	brge	.+88     	; 0x1c46 <main+0x6ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bee:	fe 01       	movw	r30, r28
    1bf0:	ed 5b       	subi	r30, 0xBD	; 189
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	60 81       	ld	r22, Z
    1bf6:	71 81       	ldd	r23, Z+1	; 0x01
    1bf8:	82 81       	ldd	r24, Z+2	; 0x02
    1bfa:	93 81       	ldd	r25, Z+3	; 0x03
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e2       	ldi	r20, 0x20	; 32
    1c02:	51 e4       	ldi	r21, 0x41	; 65
    1c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	9e af       	std	Y+62, r25	; 0x3e
    1c1a:	8d af       	std	Y+61, r24	; 0x3d
    1c1c:	0f c0       	rjmp	.+30     	; 0x1c3c <main+0x6e0>
    1c1e:	80 e9       	ldi	r24, 0x90	; 144
    1c20:	91 e0       	ldi	r25, 0x01	; 1
    1c22:	9c af       	std	Y+60, r25	; 0x3c
    1c24:	8b af       	std	Y+59, r24	; 0x3b
    1c26:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c28:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <main+0x6ce>
    1c2e:	9c af       	std	Y+60, r25	; 0x3c
    1c30:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c32:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c34:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	9e af       	std	Y+62, r25	; 0x3e
    1c3a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c3e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	69 f7       	brne	.-38     	; 0x1c1e <main+0x6c2>
    1c44:	16 c0       	rjmp	.+44     	; 0x1c72 <main+0x716>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c46:	fe 01       	movw	r30, r28
    1c48:	ff 96       	adiw	r30, 0x3f	; 63
    1c4a:	60 81       	ld	r22, Z
    1c4c:	71 81       	ldd	r23, Z+1	; 0x01
    1c4e:	82 81       	ldd	r24, Z+2	; 0x02
    1c50:	93 81       	ldd	r25, Z+3	; 0x03
    1c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	9e af       	std	Y+62, r25	; 0x3e
    1c5c:	8d af       	std	Y+61, r24	; 0x3d
    1c5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c60:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c62:	9a af       	std	Y+58, r25	; 0x3a
    1c64:	89 af       	std	Y+57, r24	; 0x39
    1c66:	89 ad       	ldd	r24, Y+57	; 0x39
    1c68:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <main+0x70e>
    1c6e:	9a af       	std	Y+58, r25	; 0x3a
    1c70:	89 af       	std	Y+57, r24	; 0x39
			{
				_delay_ms(30);						// De-bouncing delay.

				if ( !(PINB & DECREMENT_HOURS) )	// Second check due to switch de-bouncing
    1c72:	e6 e3       	ldi	r30, 0x36	; 54
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	88 2f       	mov	r24, r24
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	81 70       	andi	r24, 0x01	; 1
    1c7e:	90 70       	andi	r25, 0x00	; 0
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	09 f5       	brne	.+66     	; 0x1cc6 <main+0x76a>
				{
					Hrs = (Hrs == 0) ? 23 : Hrs - 1;
    1c84:	80 91 68 00 	lds	r24, 0x0068
    1c88:	88 23       	and	r24, r24
    1c8a:	41 f0       	breq	.+16     	; 0x1c9c <main+0x740>
    1c8c:	80 91 68 00 	lds	r24, 0x0068
    1c90:	f8 2f       	mov	r31, r24
    1c92:	f1 50       	subi	r31, 0x01	; 1
    1c94:	e4 96       	adiw	r28, 0x34	; 52
    1c96:	ff af       	std	Y+63, r31	; 0x3f
    1c98:	e4 97       	sbiw	r28, 0x34	; 52
    1c9a:	04 c0       	rjmp	.+8      	; 0x1ca4 <main+0x748>
    1c9c:	87 e1       	ldi	r24, 0x17	; 23
    1c9e:	e4 96       	adiw	r28, 0x34	; 52
    1ca0:	8f af       	std	Y+63, r24	; 0x3f
    1ca2:	e4 97       	sbiw	r28, 0x34	; 52
    1ca4:	e4 96       	adiw	r28, 0x34	; 52
    1ca6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ca8:	e4 97       	sbiw	r28, 0x34	; 52
    1caa:	90 93 68 00 	sts	0x0068, r25
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <main+0x758>
					while( !(PINB & DECREMENT_HOURS) )
					{Time();}
    1cb0:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Time>
				_delay_ms(30);						// De-bouncing delay.

				if ( !(PINB & DECREMENT_HOURS) )	// Second check due to switch de-bouncing
				{
					Hrs = (Hrs == 0) ? 23 : Hrs - 1;
					while( !(PINB & DECREMENT_HOURS) )
    1cb4:	e6 e3       	ldi	r30, 0x36	; 54
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	88 2f       	mov	r24, r24
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	81 70       	andi	r24, 0x01	; 1
    1cc0:	90 70       	andi	r25, 0x00	; 0
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	a9 f3       	breq	.-22     	; 0x1cb0 <main+0x754>
				}

			}

			/* Minutes increment */
			if ( !(PINB & INCREMENT_MINUTES) )
    1cc6:	e6 e3       	ldi	r30, 0x36	; 54
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	88 2f       	mov	r24, r24
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	80 71       	andi	r24, 0x10	; 16
    1cd2:	90 70       	andi	r25, 0x00	; 0
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	09 f0       	breq	.+2      	; 0x1cda <main+0x77e>
    1cd8:	93 c0       	rjmp	.+294    	; 0x1e00 <main+0x8a4>
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	a0 ef       	ldi	r26, 0xF0	; 240
    1ce0:	b1 e4       	ldi	r27, 0x41	; 65
    1ce2:	8d ab       	std	Y+53, r24	; 0x35
    1ce4:	9e ab       	std	Y+54, r25	; 0x36
    1ce6:	af ab       	std	Y+55, r26	; 0x37
    1ce8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cea:	6d a9       	ldd	r22, Y+53	; 0x35
    1cec:	7e a9       	ldd	r23, Y+54	; 0x36
    1cee:	8f a9       	ldd	r24, Y+55	; 0x37
    1cf0:	98 ad       	ldd	r25, Y+56	; 0x38
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	4a e7       	ldi	r20, 0x7A	; 122
    1cf8:	55 e4       	ldi	r21, 0x45	; 69
    1cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	89 ab       	std	Y+49, r24	; 0x31
    1d04:	9a ab       	std	Y+50, r25	; 0x32
    1d06:	ab ab       	std	Y+51, r26	; 0x33
    1d08:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d10:	9c a9       	ldd	r25, Y+52	; 0x34
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e8       	ldi	r20, 0x80	; 128
    1d18:	5f e3       	ldi	r21, 0x3F	; 63
    1d1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d1e:	88 23       	and	r24, r24
    1d20:	2c f4       	brge	.+10     	; 0x1d2c <main+0x7d0>
		__ticks = 1;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	98 ab       	std	Y+48, r25	; 0x30
    1d28:	8f a7       	std	Y+47, r24	; 0x2f
    1d2a:	3f c0       	rjmp	.+126    	; 0x1daa <main+0x84e>
	else if (__tmp > 65535)
    1d2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d30:	8b a9       	ldd	r24, Y+51	; 0x33
    1d32:	9c a9       	ldd	r25, Y+52	; 0x34
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	3f ef       	ldi	r19, 0xFF	; 255
    1d38:	4f e7       	ldi	r20, 0x7F	; 127
    1d3a:	57 e4       	ldi	r21, 0x47	; 71
    1d3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d40:	18 16       	cp	r1, r24
    1d42:	4c f5       	brge	.+82     	; 0x1d96 <main+0x83a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d44:	6d a9       	ldd	r22, Y+53	; 0x35
    1d46:	7e a9       	ldd	r23, Y+54	; 0x36
    1d48:	8f a9       	ldd	r24, Y+55	; 0x37
    1d4a:	98 ad       	ldd	r25, Y+56	; 0x38
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e2       	ldi	r20, 0x20	; 32
    1d52:	51 e4       	ldi	r21, 0x41	; 65
    1d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	bc 01       	movw	r22, r24
    1d5e:	cd 01       	movw	r24, r26
    1d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	98 ab       	std	Y+48, r25	; 0x30
    1d6a:	8f a7       	std	Y+47, r24	; 0x2f
    1d6c:	0f c0       	rjmp	.+30     	; 0x1d8c <main+0x830>
    1d6e:	80 e9       	ldi	r24, 0x90	; 144
    1d70:	91 e0       	ldi	r25, 0x01	; 1
    1d72:	9e a7       	std	Y+46, r25	; 0x2e
    1d74:	8d a7       	std	Y+45, r24	; 0x2d
    1d76:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d78:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <main+0x81e>
    1d7e:	9e a7       	std	Y+46, r25	; 0x2e
    1d80:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d84:	98 a9       	ldd	r25, Y+48	; 0x30
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	98 ab       	std	Y+48, r25	; 0x30
    1d8a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	69 f7       	brne	.-38     	; 0x1d6e <main+0x812>
    1d94:	14 c0       	rjmp	.+40     	; 0x1dbe <main+0x862>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d96:	69 a9       	ldd	r22, Y+49	; 0x31
    1d98:	7a a9       	ldd	r23, Y+50	; 0x32
    1d9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	98 ab       	std	Y+48, r25	; 0x30
    1da8:	8f a7       	std	Y+47, r24	; 0x2f
    1daa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dac:	98 a9       	ldd	r25, Y+48	; 0x30
    1dae:	9c a7       	std	Y+44, r25	; 0x2c
    1db0:	8b a7       	std	Y+43, r24	; 0x2b
    1db2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1db4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <main+0x85a>
    1dba:	9c a7       	std	Y+44, r25	; 0x2c
    1dbc:	8b a7       	std	Y+43, r24	; 0x2b
			{
				_delay_ms(30);						// De-bouncing delay.

				if ( !(PINB & INCREMENT_MINUTES) )	// Second check due to switch de-bouncing
    1dbe:	e6 e3       	ldi	r30, 0x36	; 54
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	88 2f       	mov	r24, r24
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	80 71       	andi	r24, 0x10	; 16
    1dca:	90 70       	andi	r25, 0x00	; 0
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	c1 f4       	brne	.+48     	; 0x1e00 <main+0x8a4>
				{
					Mins = (Mins + 1) % 60;
    1dd0:	80 91 69 00 	lds	r24, 0x0069
    1dd4:	88 2f       	mov	r24, r24
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	01 96       	adiw	r24, 0x01	; 1
    1dda:	2c e3       	ldi	r18, 0x3C	; 60
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	b9 01       	movw	r22, r18
    1de0:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__divmodhi4>
    1de4:	80 93 69 00 	sts	0x0069, r24
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <main+0x892>
					while( !(PINB & INCREMENT_MINUTES) )
					{Time();}
    1dea:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Time>
				_delay_ms(30);						// De-bouncing delay.

				if ( !(PINB & INCREMENT_MINUTES) )	// Second check due to switch de-bouncing
				{
					Mins = (Mins + 1) % 60;
					while( !(PINB & INCREMENT_MINUTES) )
    1dee:	e6 e3       	ldi	r30, 0x36	; 54
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	88 2f       	mov	r24, r24
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	80 71       	andi	r24, 0x10	; 16
    1dfa:	90 70       	andi	r25, 0x00	; 0
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	a9 f3       	breq	.-22     	; 0x1dea <main+0x88e>
				}

			}

			/* Minutes decrement */
			if ( !(PINB & DECREMENT_MINUTES) )
    1e00:	e6 e3       	ldi	r30, 0x36	; 54
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	88 2f       	mov	r24, r24
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	88 70       	andi	r24, 0x08	; 8
    1e0c:	90 70       	andi	r25, 0x00	; 0
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	09 f0       	breq	.+2      	; 0x1e14 <main+0x8b8>
    1e12:	9c c0       	rjmp	.+312    	; 0x1f4c <main+0x9f0>
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	a0 ef       	ldi	r26, 0xF0	; 240
    1e1a:	b1 e4       	ldi	r27, 0x41	; 65
    1e1c:	8f a3       	std	Y+39, r24	; 0x27
    1e1e:	98 a7       	std	Y+40, r25	; 0x28
    1e20:	a9 a7       	std	Y+41, r26	; 0x29
    1e22:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e24:	6f a1       	ldd	r22, Y+39	; 0x27
    1e26:	78 a5       	ldd	r23, Y+40	; 0x28
    1e28:	89 a5       	ldd	r24, Y+41	; 0x29
    1e2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	4a e7       	ldi	r20, 0x7A	; 122
    1e32:	55 e4       	ldi	r21, 0x45	; 69
    1e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	8b a3       	std	Y+35, r24	; 0x23
    1e3e:	9c a3       	std	Y+36, r25	; 0x24
    1e40:	ad a3       	std	Y+37, r26	; 0x25
    1e42:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e44:	6b a1       	ldd	r22, Y+35	; 0x23
    1e46:	7c a1       	ldd	r23, Y+36	; 0x24
    1e48:	8d a1       	ldd	r24, Y+37	; 0x25
    1e4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	40 e8       	ldi	r20, 0x80	; 128
    1e52:	5f e3       	ldi	r21, 0x3F	; 63
    1e54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e58:	88 23       	and	r24, r24
    1e5a:	2c f4       	brge	.+10     	; 0x1e66 <main+0x90a>
		__ticks = 1;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	9a a3       	std	Y+34, r25	; 0x22
    1e62:	89 a3       	std	Y+33, r24	; 0x21
    1e64:	3f c0       	rjmp	.+126    	; 0x1ee4 <main+0x988>
	else if (__tmp > 65535)
    1e66:	6b a1       	ldd	r22, Y+35	; 0x23
    1e68:	7c a1       	ldd	r23, Y+36	; 0x24
    1e6a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e6c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	3f ef       	ldi	r19, 0xFF	; 255
    1e72:	4f e7       	ldi	r20, 0x7F	; 127
    1e74:	57 e4       	ldi	r21, 0x47	; 71
    1e76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e7a:	18 16       	cp	r1, r24
    1e7c:	4c f5       	brge	.+82     	; 0x1ed0 <main+0x974>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7e:	6f a1       	ldd	r22, Y+39	; 0x27
    1e80:	78 a5       	ldd	r23, Y+40	; 0x28
    1e82:	89 a5       	ldd	r24, Y+41	; 0x29
    1e84:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e2       	ldi	r20, 0x20	; 32
    1e8c:	51 e4       	ldi	r21, 0x41	; 65
    1e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	bc 01       	movw	r22, r24
    1e98:	cd 01       	movw	r24, r26
    1e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	9a a3       	std	Y+34, r25	; 0x22
    1ea4:	89 a3       	std	Y+33, r24	; 0x21
    1ea6:	0f c0       	rjmp	.+30     	; 0x1ec6 <main+0x96a>
    1ea8:	80 e9       	ldi	r24, 0x90	; 144
    1eaa:	91 e0       	ldi	r25, 0x01	; 1
    1eac:	98 a3       	std	Y+32, r25	; 0x20
    1eae:	8f 8f       	std	Y+31, r24	; 0x1f
    1eb0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1eb2:	98 a1       	ldd	r25, Y+32	; 0x20
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <main+0x958>
    1eb8:	98 a3       	std	Y+32, r25	; 0x20
    1eba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ebc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ebe:	9a a1       	ldd	r25, Y+34	; 0x22
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	9a a3       	std	Y+34, r25	; 0x22
    1ec4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ec8:	9a a1       	ldd	r25, Y+34	; 0x22
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	69 f7       	brne	.-38     	; 0x1ea8 <main+0x94c>
    1ece:	14 c0       	rjmp	.+40     	; 0x1ef8 <main+0x99c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ed2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ed4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ed6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	9a a3       	std	Y+34, r25	; 0x22
    1ee2:	89 a3       	std	Y+33, r24	; 0x21
    1ee4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ee6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ee8:	9e 8f       	std	Y+30, r25	; 0x1e
    1eea:	8d 8f       	std	Y+29, r24	; 0x1d
    1eec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	f1 f7       	brne	.-4      	; 0x1ef0 <main+0x994>
    1ef4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ef6:	8d 8f       	std	Y+29, r24	; 0x1d
			{
				_delay_ms(30);						// De-bouncing delay.

				if ( !(PINB & DECREMENT_MINUTES) )	// Second check due to switch de-bouncing
    1ef8:	e6 e3       	ldi	r30, 0x36	; 54
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	88 2f       	mov	r24, r24
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	88 70       	andi	r24, 0x08	; 8
    1f04:	90 70       	andi	r25, 0x00	; 0
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	09 f5       	brne	.+66     	; 0x1f4c <main+0x9f0>
				{
					Mins = (Mins == 0) ? 59 : Mins - 1;
    1f0a:	80 91 69 00 	lds	r24, 0x0069
    1f0e:	88 23       	and	r24, r24
    1f10:	41 f0       	breq	.+16     	; 0x1f22 <main+0x9c6>
    1f12:	80 91 69 00 	lds	r24, 0x0069
    1f16:	e8 2f       	mov	r30, r24
    1f18:	e1 50       	subi	r30, 0x01	; 1
    1f1a:	e3 96       	adiw	r28, 0x33	; 51
    1f1c:	ef af       	std	Y+63, r30	; 0x3f
    1f1e:	e3 97       	sbiw	r28, 0x33	; 51
    1f20:	04 c0       	rjmp	.+8      	; 0x1f2a <main+0x9ce>
    1f22:	fb e3       	ldi	r31, 0x3B	; 59
    1f24:	e3 96       	adiw	r28, 0x33	; 51
    1f26:	ff af       	std	Y+63, r31	; 0x3f
    1f28:	e3 97       	sbiw	r28, 0x33	; 51
    1f2a:	e3 96       	adiw	r28, 0x33	; 51
    1f2c:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f2e:	e3 97       	sbiw	r28, 0x33	; 51
    1f30:	80 93 69 00 	sts	0x0069, r24
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <main+0x9de>
					while( !(PINB & DECREMENT_MINUTES) )
					{Time();}
    1f36:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Time>
				_delay_ms(30);						// De-bouncing delay.

				if ( !(PINB & DECREMENT_MINUTES) )	// Second check due to switch de-bouncing
				{
					Mins = (Mins == 0) ? 59 : Mins - 1;
					while( !(PINB & DECREMENT_MINUTES) )
    1f3a:	e6 e3       	ldi	r30, 0x36	; 54
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	88 2f       	mov	r24, r24
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	88 70       	andi	r24, 0x08	; 8
    1f46:	90 70       	andi	r25, 0x00	; 0
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	a9 f3       	breq	.-22     	; 0x1f36 <main+0x9da>
				}

			}

			/* Seconds increment */
			if ( !(PINB & INCREMENT_SECONDS) )
    1f4c:	e6 e3       	ldi	r30, 0x36	; 54
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	88 2f       	mov	r24, r24
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	80 74       	andi	r24, 0x40	; 64
    1f58:	90 70       	andi	r25, 0x00	; 0
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	09 f0       	breq	.+2      	; 0x1f60 <main+0xa04>
    1f5e:	93 c0       	rjmp	.+294    	; 0x2086 <main+0xb2a>
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	a0 ef       	ldi	r26, 0xF0	; 240
    1f66:	b1 e4       	ldi	r27, 0x41	; 65
    1f68:	89 8f       	std	Y+25, r24	; 0x19
    1f6a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f6c:	ab 8f       	std	Y+27, r26	; 0x1b
    1f6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f70:	69 8d       	ldd	r22, Y+25	; 0x19
    1f72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	4a e7       	ldi	r20, 0x7A	; 122
    1f7e:	55 e4       	ldi	r21, 0x45	; 69
    1f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	8d 8b       	std	Y+21, r24	; 0x15
    1f8a:	9e 8b       	std	Y+22, r25	; 0x16
    1f8c:	af 8b       	std	Y+23, r26	; 0x17
    1f8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f90:	6d 89       	ldd	r22, Y+21	; 0x15
    1f92:	7e 89       	ldd	r23, Y+22	; 0x16
    1f94:	8f 89       	ldd	r24, Y+23	; 0x17
    1f96:	98 8d       	ldd	r25, Y+24	; 0x18
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e8       	ldi	r20, 0x80	; 128
    1f9e:	5f e3       	ldi	r21, 0x3F	; 63
    1fa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fa4:	88 23       	and	r24, r24
    1fa6:	2c f4       	brge	.+10     	; 0x1fb2 <main+0xa56>
		__ticks = 1;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	9c 8b       	std	Y+20, r25	; 0x14
    1fae:	8b 8b       	std	Y+19, r24	; 0x13
    1fb0:	3f c0       	rjmp	.+126    	; 0x2030 <main+0xad4>
	else if (__tmp > 65535)
    1fb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	3f ef       	ldi	r19, 0xFF	; 255
    1fbe:	4f e7       	ldi	r20, 0x7F	; 127
    1fc0:	57 e4       	ldi	r21, 0x47	; 71
    1fc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fc6:	18 16       	cp	r1, r24
    1fc8:	4c f5       	brge	.+82     	; 0x201c <main+0xac0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fca:	69 8d       	ldd	r22, Y+25	; 0x19
    1fcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e2       	ldi	r20, 0x20	; 32
    1fd8:	51 e4       	ldi	r21, 0x41	; 65
    1fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	bc 01       	movw	r22, r24
    1fe4:	cd 01       	movw	r24, r26
    1fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	9c 8b       	std	Y+20, r25	; 0x14
    1ff0:	8b 8b       	std	Y+19, r24	; 0x13
    1ff2:	0f c0       	rjmp	.+30     	; 0x2012 <main+0xab6>
    1ff4:	80 e9       	ldi	r24, 0x90	; 144
    1ff6:	91 e0       	ldi	r25, 0x01	; 1
    1ff8:	9a 8b       	std	Y+18, r25	; 0x12
    1ffa:	89 8b       	std	Y+17, r24	; 0x11
    1ffc:	89 89       	ldd	r24, Y+17	; 0x11
    1ffe:	9a 89       	ldd	r25, Y+18	; 0x12
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	f1 f7       	brne	.-4      	; 0x2000 <main+0xaa4>
    2004:	9a 8b       	std	Y+18, r25	; 0x12
    2006:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2008:	8b 89       	ldd	r24, Y+19	; 0x13
    200a:	9c 89       	ldd	r25, Y+20	; 0x14
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	9c 8b       	std	Y+20, r25	; 0x14
    2010:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2012:	8b 89       	ldd	r24, Y+19	; 0x13
    2014:	9c 89       	ldd	r25, Y+20	; 0x14
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	69 f7       	brne	.-38     	; 0x1ff4 <main+0xa98>
    201a:	14 c0       	rjmp	.+40     	; 0x2044 <main+0xae8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201c:	6d 89       	ldd	r22, Y+21	; 0x15
    201e:	7e 89       	ldd	r23, Y+22	; 0x16
    2020:	8f 89       	ldd	r24, Y+23	; 0x17
    2022:	98 8d       	ldd	r25, Y+24	; 0x18
    2024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	9c 8b       	std	Y+20, r25	; 0x14
    202e:	8b 8b       	std	Y+19, r24	; 0x13
    2030:	8b 89       	ldd	r24, Y+19	; 0x13
    2032:	9c 89       	ldd	r25, Y+20	; 0x14
    2034:	98 8b       	std	Y+16, r25	; 0x10
    2036:	8f 87       	std	Y+15, r24	; 0x0f
    2038:	8f 85       	ldd	r24, Y+15	; 0x0f
    203a:	98 89       	ldd	r25, Y+16	; 0x10
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <main+0xae0>
    2040:	98 8b       	std	Y+16, r25	; 0x10
    2042:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(30);						// De-bouncing delay.

				if ( !(PINB & INCREMENT_SECONDS) )	// Second check due to switch de-bouncing
    2044:	e6 e3       	ldi	r30, 0x36	; 54
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	88 2f       	mov	r24, r24
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	80 74       	andi	r24, 0x40	; 64
    2050:	90 70       	andi	r25, 0x00	; 0
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	c1 f4       	brne	.+48     	; 0x2086 <main+0xb2a>
				{
					Secs = (Secs + 1) % 60;
    2056:	80 91 6a 00 	lds	r24, 0x006A
    205a:	88 2f       	mov	r24, r24
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	01 96       	adiw	r24, 0x01	; 1
    2060:	2c e3       	ldi	r18, 0x3C	; 60
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	b9 01       	movw	r22, r18
    2066:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__divmodhi4>
    206a:	80 93 6a 00 	sts	0x006A, r24
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <main+0xb18>
					while( !(PINB & INCREMENT_SECONDS) )
					{Time();};
    2070:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Time>
				_delay_ms(30);						// De-bouncing delay.

				if ( !(PINB & INCREMENT_SECONDS) )	// Second check due to switch de-bouncing
				{
					Secs = (Secs + 1) % 60;
					while( !(PINB & INCREMENT_SECONDS) )
    2074:	e6 e3       	ldi	r30, 0x36	; 54
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	88 2f       	mov	r24, r24
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	80 74       	andi	r24, 0x40	; 64
    2080:	90 70       	andi	r25, 0x00	; 0
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	a9 f3       	breq	.-22     	; 0x2070 <main+0xb14>
				}

			}

			/* Seconds decrement */
			if ( !(PINB & DECREMENT_SECONDS) )
    2086:	e6 e3       	ldi	r30, 0x36	; 54
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	88 2f       	mov	r24, r24
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	80 72       	andi	r24, 0x20	; 32
    2092:	90 70       	andi	r25, 0x00	; 0
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	09 f0       	breq	.+2      	; 0x209a <main+0xb3e>
    2098:	9c c0       	rjmp	.+312    	; 0x21d2 <main+0xc76>
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	a0 ef       	ldi	r26, 0xF0	; 240
    20a0:	b1 e4       	ldi	r27, 0x41	; 65
    20a2:	8b 87       	std	Y+11, r24	; 0x0b
    20a4:	9c 87       	std	Y+12, r25	; 0x0c
    20a6:	ad 87       	std	Y+13, r26	; 0x0d
    20a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	4a e7       	ldi	r20, 0x7A	; 122
    20b8:	55 e4       	ldi	r21, 0x45	; 69
    20ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	8f 83       	std	Y+7, r24	; 0x07
    20c4:	98 87       	std	Y+8, r25	; 0x08
    20c6:	a9 87       	std	Y+9, r26	; 0x09
    20c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ca:	6f 81       	ldd	r22, Y+7	; 0x07
    20cc:	78 85       	ldd	r23, Y+8	; 0x08
    20ce:	89 85       	ldd	r24, Y+9	; 0x09
    20d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e8       	ldi	r20, 0x80	; 128
    20d8:	5f e3       	ldi	r21, 0x3F	; 63
    20da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20de:	88 23       	and	r24, r24
    20e0:	2c f4       	brge	.+10     	; 0x20ec <main+0xb90>
		__ticks = 1;
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	9e 83       	std	Y+6, r25	; 0x06
    20e8:	8d 83       	std	Y+5, r24	; 0x05
    20ea:	3f c0       	rjmp	.+126    	; 0x216a <main+0xc0e>
	else if (__tmp > 65535)
    20ec:	6f 81       	ldd	r22, Y+7	; 0x07
    20ee:	78 85       	ldd	r23, Y+8	; 0x08
    20f0:	89 85       	ldd	r24, Y+9	; 0x09
    20f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	3f ef       	ldi	r19, 0xFF	; 255
    20f8:	4f e7       	ldi	r20, 0x7F	; 127
    20fa:	57 e4       	ldi	r21, 0x47	; 71
    20fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2100:	18 16       	cp	r1, r24
    2102:	4c f5       	brge	.+82     	; 0x2156 <main+0xbfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2104:	6b 85       	ldd	r22, Y+11	; 0x0b
    2106:	7c 85       	ldd	r23, Y+12	; 0x0c
    2108:	8d 85       	ldd	r24, Y+13	; 0x0d
    210a:	9e 85       	ldd	r25, Y+14	; 0x0e
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e2       	ldi	r20, 0x20	; 32
    2112:	51 e4       	ldi	r21, 0x41	; 65
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	bc 01       	movw	r22, r24
    211e:	cd 01       	movw	r24, r26
    2120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	9e 83       	std	Y+6, r25	; 0x06
    212a:	8d 83       	std	Y+5, r24	; 0x05
    212c:	0f c0       	rjmp	.+30     	; 0x214c <main+0xbf0>
    212e:	80 e9       	ldi	r24, 0x90	; 144
    2130:	91 e0       	ldi	r25, 0x01	; 1
    2132:	9c 83       	std	Y+4, r25	; 0x04
    2134:	8b 83       	std	Y+3, r24	; 0x03
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	9c 81       	ldd	r25, Y+4	; 0x04
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <main+0xbde>
    213e:	9c 83       	std	Y+4, r25	; 0x04
    2140:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2142:	8d 81       	ldd	r24, Y+5	; 0x05
    2144:	9e 81       	ldd	r25, Y+6	; 0x06
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	9e 83       	std	Y+6, r25	; 0x06
    214a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214c:	8d 81       	ldd	r24, Y+5	; 0x05
    214e:	9e 81       	ldd	r25, Y+6	; 0x06
    2150:	00 97       	sbiw	r24, 0x00	; 0
    2152:	69 f7       	brne	.-38     	; 0x212e <main+0xbd2>
    2154:	14 c0       	rjmp	.+40     	; 0x217e <main+0xc22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2156:	6f 81       	ldd	r22, Y+7	; 0x07
    2158:	78 85       	ldd	r23, Y+8	; 0x08
    215a:	89 85       	ldd	r24, Y+9	; 0x09
    215c:	9a 85       	ldd	r25, Y+10	; 0x0a
    215e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	9e 83       	std	Y+6, r25	; 0x06
    2168:	8d 83       	std	Y+5, r24	; 0x05
    216a:	8d 81       	ldd	r24, Y+5	; 0x05
    216c:	9e 81       	ldd	r25, Y+6	; 0x06
    216e:	9a 83       	std	Y+2, r25	; 0x02
    2170:	89 83       	std	Y+1, r24	; 0x01
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	9a 81       	ldd	r25, Y+2	; 0x02
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <main+0xc1a>
    217a:	9a 83       	std	Y+2, r25	; 0x02
    217c:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(30);						// De-bouncing delay.

				if ( !(PINB & DECREMENT_SECONDS) )	// Second check due to switch de-bouncing
    217e:	e6 e3       	ldi	r30, 0x36	; 54
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	88 2f       	mov	r24, r24
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	80 72       	andi	r24, 0x20	; 32
    218a:	90 70       	andi	r25, 0x00	; 0
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	09 f5       	brne	.+66     	; 0x21d2 <main+0xc76>
				{
					Secs = (Secs == 0) ? 59 : Secs - 1;
    2190:	80 91 6a 00 	lds	r24, 0x006A
    2194:	88 23       	and	r24, r24
    2196:	41 f0       	breq	.+16     	; 0x21a8 <main+0xc4c>
    2198:	80 91 6a 00 	lds	r24, 0x006A
    219c:	98 2f       	mov	r25, r24
    219e:	91 50       	subi	r25, 0x01	; 1
    21a0:	e2 96       	adiw	r28, 0x32	; 50
    21a2:	9f af       	std	Y+63, r25	; 0x3f
    21a4:	e2 97       	sbiw	r28, 0x32	; 50
    21a6:	04 c0       	rjmp	.+8      	; 0x21b0 <main+0xc54>
    21a8:	eb e3       	ldi	r30, 0x3B	; 59
    21aa:	e2 96       	adiw	r28, 0x32	; 50
    21ac:	ef af       	std	Y+63, r30	; 0x3f
    21ae:	e2 97       	sbiw	r28, 0x32	; 50
    21b0:	e2 96       	adiw	r28, 0x32	; 50
    21b2:	ff ad       	ldd	r31, Y+63	; 0x3f
    21b4:	e2 97       	sbiw	r28, 0x32	; 50
    21b6:	f0 93 6a 00 	sts	0x006A, r31
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <main+0xc64>
					while( !(PINB & DECREMENT_SECONDS) )
					{Time();}
    21bc:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Time>
				_delay_ms(30);						// De-bouncing delay.

				if ( !(PINB & DECREMENT_SECONDS) )	// Second check due to switch de-bouncing
				{
					Secs = (Secs == 0) ? 59 : Secs - 1;
					while( !(PINB & DECREMENT_SECONDS) )
    21c0:	e6 e3       	ldi	r30, 0x36	; 54
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	88 2f       	mov	r24, r24
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	80 72       	andi	r24, 0x20	; 32
    21cc:	90 70       	andi	r25, 0x00	; 0
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	a9 f3       	breq	.-22     	; 0x21bc <main+0xc60>
					{Time();}
				}

			}

			Time();								  // Continuously update the display
    21d2:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Time>
			}

		}


		while (Flag_Pause == 1)
    21d6:	80 91 6c 00 	lds	r24, 0x006C
    21da:	81 30       	cpi	r24, 0x01	; 1
    21dc:	09 f4       	brne	.+2      	; 0x21e0 <main+0xc84>
    21de:	f3 ca       	rjmp	.-2586   	; 0x17c6 <main+0x26a>
    21e0:	11 ca       	rjmp	.-3038   	; 0x1604 <main+0xa8>

000021e2 <__udivmodqi4>:
    21e2:	99 1b       	sub	r25, r25
    21e4:	79 e0       	ldi	r23, 0x09	; 9
    21e6:	04 c0       	rjmp	.+8      	; 0x21f0 <__udivmodqi4_ep>

000021e8 <__udivmodqi4_loop>:
    21e8:	99 1f       	adc	r25, r25
    21ea:	96 17       	cp	r25, r22
    21ec:	08 f0       	brcs	.+2      	; 0x21f0 <__udivmodqi4_ep>
    21ee:	96 1b       	sub	r25, r22

000021f0 <__udivmodqi4_ep>:
    21f0:	88 1f       	adc	r24, r24
    21f2:	7a 95       	dec	r23
    21f4:	c9 f7       	brne	.-14     	; 0x21e8 <__udivmodqi4_loop>
    21f6:	80 95       	com	r24
    21f8:	08 95       	ret

000021fa <__divmodhi4>:
    21fa:	97 fb       	bst	r25, 7
    21fc:	09 2e       	mov	r0, r25
    21fe:	07 26       	eor	r0, r23
    2200:	0a d0       	rcall	.+20     	; 0x2216 <__divmodhi4_neg1>
    2202:	77 fd       	sbrc	r23, 7
    2204:	04 d0       	rcall	.+8      	; 0x220e <__divmodhi4_neg2>
    2206:	0c d0       	rcall	.+24     	; 0x2220 <__udivmodhi4>
    2208:	06 d0       	rcall	.+12     	; 0x2216 <__divmodhi4_neg1>
    220a:	00 20       	and	r0, r0
    220c:	1a f4       	brpl	.+6      	; 0x2214 <__divmodhi4_exit>

0000220e <__divmodhi4_neg2>:
    220e:	70 95       	com	r23
    2210:	61 95       	neg	r22
    2212:	7f 4f       	sbci	r23, 0xFF	; 255

00002214 <__divmodhi4_exit>:
    2214:	08 95       	ret

00002216 <__divmodhi4_neg1>:
    2216:	f6 f7       	brtc	.-4      	; 0x2214 <__divmodhi4_exit>
    2218:	90 95       	com	r25
    221a:	81 95       	neg	r24
    221c:	9f 4f       	sbci	r25, 0xFF	; 255
    221e:	08 95       	ret

00002220 <__udivmodhi4>:
    2220:	aa 1b       	sub	r26, r26
    2222:	bb 1b       	sub	r27, r27
    2224:	51 e1       	ldi	r21, 0x11	; 17
    2226:	07 c0       	rjmp	.+14     	; 0x2236 <__udivmodhi4_ep>

00002228 <__udivmodhi4_loop>:
    2228:	aa 1f       	adc	r26, r26
    222a:	bb 1f       	adc	r27, r27
    222c:	a6 17       	cp	r26, r22
    222e:	b7 07       	cpc	r27, r23
    2230:	10 f0       	brcs	.+4      	; 0x2236 <__udivmodhi4_ep>
    2232:	a6 1b       	sub	r26, r22
    2234:	b7 0b       	sbc	r27, r23

00002236 <__udivmodhi4_ep>:
    2236:	88 1f       	adc	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	5a 95       	dec	r21
    223c:	a9 f7       	brne	.-22     	; 0x2228 <__udivmodhi4_loop>
    223e:	80 95       	com	r24
    2240:	90 95       	com	r25
    2242:	bc 01       	movw	r22, r24
    2244:	cd 01       	movw	r24, r26
    2246:	08 95       	ret

00002248 <__prologue_saves__>:
    2248:	2f 92       	push	r2
    224a:	3f 92       	push	r3
    224c:	4f 92       	push	r4
    224e:	5f 92       	push	r5
    2250:	6f 92       	push	r6
    2252:	7f 92       	push	r7
    2254:	8f 92       	push	r8
    2256:	9f 92       	push	r9
    2258:	af 92       	push	r10
    225a:	bf 92       	push	r11
    225c:	cf 92       	push	r12
    225e:	df 92       	push	r13
    2260:	ef 92       	push	r14
    2262:	ff 92       	push	r15
    2264:	0f 93       	push	r16
    2266:	1f 93       	push	r17
    2268:	cf 93       	push	r28
    226a:	df 93       	push	r29
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	ca 1b       	sub	r28, r26
    2272:	db 0b       	sbc	r29, r27
    2274:	0f b6       	in	r0, 0x3f	; 63
    2276:	f8 94       	cli
    2278:	de bf       	out	0x3e, r29	; 62
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	cd bf       	out	0x3d, r28	; 61
    227e:	09 94       	ijmp

00002280 <__epilogue_restores__>:
    2280:	2a 88       	ldd	r2, Y+18	; 0x12
    2282:	39 88       	ldd	r3, Y+17	; 0x11
    2284:	48 88       	ldd	r4, Y+16	; 0x10
    2286:	5f 84       	ldd	r5, Y+15	; 0x0f
    2288:	6e 84       	ldd	r6, Y+14	; 0x0e
    228a:	7d 84       	ldd	r7, Y+13	; 0x0d
    228c:	8c 84       	ldd	r8, Y+12	; 0x0c
    228e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2290:	aa 84       	ldd	r10, Y+10	; 0x0a
    2292:	b9 84       	ldd	r11, Y+9	; 0x09
    2294:	c8 84       	ldd	r12, Y+8	; 0x08
    2296:	df 80       	ldd	r13, Y+7	; 0x07
    2298:	ee 80       	ldd	r14, Y+6	; 0x06
    229a:	fd 80       	ldd	r15, Y+5	; 0x05
    229c:	0c 81       	ldd	r16, Y+4	; 0x04
    229e:	1b 81       	ldd	r17, Y+3	; 0x03
    22a0:	aa 81       	ldd	r26, Y+2	; 0x02
    22a2:	b9 81       	ldd	r27, Y+1	; 0x01
    22a4:	ce 0f       	add	r28, r30
    22a6:	d1 1d       	adc	r29, r1
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	de bf       	out	0x3e, r29	; 62
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	ed 01       	movw	r28, r26
    22b4:	08 95       	ret

000022b6 <_exit>:
    22b6:	f8 94       	cli

000022b8 <__stop_program>:
    22b8:	ff cf       	rjmp	.-2      	; 0x22b8 <__stop_program>
